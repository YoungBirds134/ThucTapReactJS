[{"F:\\ThucTapReactJS\\my-app\\src\\index.js":"1","F:\\ThucTapReactJS\\my-app\\src\\App.js":"2","F:\\ThucTapReactJS\\my-app\\src\\reportWebVitals.js":"3","F:\\ThucTapReactJS\\my-app\\src\\util\\queryClient.js":"4","F:\\ThucTapReactJS\\my-app\\src\\Page\\ManageStudent\\index.js":"5","F:\\ThucTapReactJS\\my-app\\src\\components\\PopUpStudent\\index.js":"6","F:\\ThucTapReactJS\\my-app\\src\\components\\CellStudent\\index.js":"7","F:\\ThucTapReactJS\\my-app\\src\\components\\BatchStudent\\index.js":"8","F:\\ThucTapReactJS\\my-app\\src\\components\\FormStudent\\index.js":"9","F:\\ThucTapReactJS\\my-app\\src\\components\\PopUpStudent\\hooks\\useGetData.js":"10","F:\\ThucTapReactJS\\my-app\\src\\components\\PopUpStudent\\hooks\\useCreateData.js":"11","F:\\ThucTapReactJS\\my-app\\src\\components\\PopUpStudent\\hooks\\useDeleteData.js":"12","F:\\ThucTapReactJS\\my-app\\src\\components\\PopUpStudent\\hooks\\useGetDataByPaging.js":"13","F:\\ThucTapReactJS\\my-app\\src\\components\\CellStudent\\hooks\\useGetData.js":"14","F:\\ThucTapReactJS\\my-app\\src\\components\\PopUpStudent\\hooks\\useUpdateData.js":"15","F:\\ThucTapReactJS\\my-app\\src\\util\\queryKeys.js":"16"},{"size":517,"mtime":1637981782902,"results":"17","hashOfConfig":"18"},{"size":535,"mtime":1637981782895,"results":"19","hashOfConfig":"18"},{"size":375,"mtime":1637981782904,"results":"20","hashOfConfig":"18"},{"size":593,"mtime":1637981782905,"results":"21","hashOfConfig":"18"},{"size":1339,"mtime":1637981782896,"results":"22","hashOfConfig":"18"},{"size":12479,"mtime":1637981782902,"results":"23","hashOfConfig":"18"},{"size":7333,"mtime":1638008844357,"results":"24","hashOfConfig":"18"},{"size":6986,"mtime":1637981782897,"results":"25","hashOfConfig":"18"},{"size":5662,"mtime":1637981782899,"results":"26","hashOfConfig":"18"},{"size":755,"mtime":1637981782900,"results":"27","hashOfConfig":"18"},{"size":1090,"mtime":1638008893697,"results":"28","hashOfConfig":"18"},{"size":1066,"mtime":1637981782900,"results":"29","hashOfConfig":"18"},{"size":1074,"mtime":1637981782900,"results":"30","hashOfConfig":"18"},{"size":518,"mtime":1637981782898,"results":"31","hashOfConfig":"18"},{"size":1091,"mtime":1637981782901,"results":"32","hashOfConfig":"18"},{"size":226,"mtime":1637981782905,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"ugiy3h",{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"36"},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"36"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"36"},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52"},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"36"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"36"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"36"},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"36"},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"36"},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"F:\\ThucTapReactJS\\my-app\\src\\index.js",[],["76","77"],"F:\\ThucTapReactJS\\my-app\\src\\App.js",["78"],"import logo from \"./logo.svg\";\r\nimport \"./App.css\";\r\nimport ManageStudent from \"./Page/ManageStudent/index\";\r\nimport { QueryClientProvider } from \"react-query\";\r\nimport { ReactQueryDevtools } from \"react-query/devtools\";\r\nimport { queryClient } from \"./util/queryClient\";\r\n\r\nfunction App() {\r\n  return (\r\n    <QueryClientProvider client={queryClient}>\r\n      <div className=\"App\">\r\n        <ManageStudent />\r\n      </div>\r\n      <ReactQueryDevtools initialIsOpen={false} />\r\n    </QueryClientProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","F:\\ThucTapReactJS\\my-app\\src\\reportWebVitals.js",[],"F:\\ThucTapReactJS\\my-app\\src\\util\\queryClient.js",[],"F:\\ThucTapReactJS\\my-app\\src\\Page\\ManageStudent\\index.js",["79"],"import {Box,Tab} from '@mui/material';\r\nimport TabContext from '@mui/lab/TabContext';\r\nimport TabList from '@mui/lab/TabList';\r\nimport TabPanel from '@mui/lab/TabPanel';\r\nimport * as React from 'react';\r\nimport PopupStudent from \"./../../components/PopUpStudent/index\";\r\nimport BatchStudent from \"./../../components/BatchStudent/index\";\r\nimport FormStudent from \"./../../components/FormStudent/index\";\r\nimport CellStudent from \"./../../components/CellStudent/index\";\r\n\r\nfunction ManageStudent() {\r\n    const [value, setValue] = React.useState('3');\r\n\r\n    const handleChange = (event, newValue) => {\r\n      setValue(newValue);\r\n    };\r\n  \r\n    return (\r\n      <Box sx={{ width: '100%', typography: 'body1' }}>\r\n        <TabContext value={value}>\r\n          <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>\r\n            <TabList onChange={handleChange} aria-label=\"lab API tabs example\">\r\n              <Tab label=\"Popup UI\" value=\"1\" />\r\n              <Tab label=\"Batch UI\" value=\"2\" />\r\n              <Tab label=\"Cell UI\" value=\"3\" />\r\n            </TabList>\r\n          </Box>\r\n          <TabPanel value=\"1\"><PopupStudent/></TabPanel>\r\n          <TabPanel value=\"2\"><BatchStudent/></TabPanel>\r\n          <TabPanel value=\"3\"><CellStudent/></TabPanel>\r\n        </TabContext>\r\n      </Box>\r\n    );\r\n}\r\n\r\nexport default ManageStudent;\r\n","F:\\ThucTapReactJS\\my-app\\src\\components\\PopUpStudent\\index.js",["80","81","82","83","84","85","86","87","88","89","90","91","92","93","94","95"],"import \"devextreme/dist/css/dx.common.css\";\r\nimport \"devextreme/dist/css/dx.light.css\";\r\nimport React, { useEffect, useState, useRef, useCallback } from \"react\";\r\nimport ArrayStore from \"devextreme/data/array_store\";\r\nimport DataSource from \"devextreme/data/data_source\";\r\nimport { LoadPanel } from \"devextreme-react/load-panel\";\r\nimport \"./PopUpStudent.css\";\r\n\r\nimport moment from \"moment\";\r\nimport DataGrid, {\r\n  Column,\r\n  Paging,\r\n  Pager,\r\n  Editing,\r\n  Popup,\r\n  Toolbar,\r\n  Item,\r\n  Scrolling,\r\n  ToolbarItem,\r\n} from \"devextreme-react/data-grid\";\r\nimport { TextField, Button } from \"@material-ui/core\";\r\n\r\nimport { useForm, Controller } from \"react-hook-form\";\r\n\r\n// Toast\r\nimport { toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\nimport useGetData from \"./hooks/useGetData\";\r\nimport useGetDataByPaing from \"./hooks/useGetDataByPaging\";\r\nimport useDeleteData from \"./hooks/useDeleteData\";\r\nimport useCreateData from \"./hooks/useCreateData\";\r\nimport useUpdateData from \"./hooks/useUpdateData\";\r\n\r\n///\r\n\r\n/////////\r\ntoast.configure();\r\nconst PopUpStudent = () => {\r\n  ///Use Query\r\n  const {\r\n    refetchStudent,\r\n\r\n    dataStudent,\r\n    isErrorStudent,\r\n    isLoadingStudent,\r\n  } = useGetData();\r\n\r\n  setTimeout(dataStudent, 5000000);\r\n  //State\r\n  const allowedPageSizes = [5, 10, \"all\"];\r\n  const [checkPopup, setCheckPopup] = useState(null);\r\n  const [page, setPage] = useState({ _pageIndex: 1, _pageSize: 5 });\r\n  const [isLoadingPanel, setIsLoadingPanel] = useState(false);\r\n  const [isShowing, setIsShowing] = useState(false);\r\n  const [TiTlePopup, setTiTlePopup] = useState(\"\");\r\n\r\n  // Save params\r\n  const gridRef = useRef(null);\r\n\r\n  const studentDataSource = new DataSource({\r\n    store: new ArrayStore({\r\n      key: \"id\",\r\n      data: dataStudent,\r\n\r\n      // Other ArrayStore properties go here\r\n    }),\r\n    // Other DataSource properties go here\r\n\r\n    reshapeOnPush: true,\r\n  });\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    control,\r\n    setValue,\r\n    formState: { errors, isSubmitSuccessful },\r\n  } = useForm({ defaultValues: { something: \"anything\" } });\r\n\r\n  useEffect(() => {\r\n    if (checkPopup) {\r\n      setValue(\"nameStudent\", checkPopup.nameStudent);\r\n      setValue(\"phoneStudent\", checkPopup.phoneStudent);\r\n      setValue(\"dateOfBirth\", checkPopup.dateOfBirth);\r\n      setValue(\"scoreStudent\", checkPopup.scoreStudent);\r\n    }\r\n  }, [checkPopup]);\r\n\r\n  const createMutation = useCreateData();\r\n  const updateMutation = useUpdateData();\r\n  const deleteMutation = useDeleteData();\r\n  // const {\r\n  //   dataStudentByPaging,\r\n  //   isLoadingStudentByPaging,\r\n  //   refetchStudentByPaging,\r\n  //   removeStudentByPaging,\r\n\r\n  //   errorStudentByPaging,\r\n  // } = useGetDataByPaging(page);\r\n\r\n  const { isLoading, isError, error, isSuccess } = createMutation;\r\n\r\n  const onSubmitAdjustStudent = async (student, e) => {\r\n    if (checkPopup !== null) {\r\n      let convertDate = moment(student.dateOfBirth).format(\"YYYY-MM-DD\");\r\n      let newStudent = {\r\n        id: checkPopup.id,\r\n        nameStudent: student.nameStudent,\r\n        phoneStudent: student.phoneStudent,\r\n        dateOfBirth: convertDate,\r\n        scoreStudent: student.scoreStudent,\r\n      };\r\n      updateMutation.mutate(newStudent);\r\n      studentDataSource\r\n        .store()\r\n        .push([{ type: \"update\", data: newStudent, key: checkPopup.id }]);\r\n    } else {\r\n      const newStudent = [{\r\n        nameStudent: student.nameStudent,\r\n        scoreStudent: student.scoreStudent,\r\n        phoneStudent: student.phoneStudent,\r\n        dateOfBirth: student.dateOfBirth,\r\n\r\n        // id: randomIdStudent,\r\n      }];\r\n      createMutation.mutate(newStudent);\r\n      studentDataSource.store().push([{ type: \"insert\", data: newStudent }]);\r\n    }\r\n    e.target.reset();\r\n    setCheckPopup(null);\r\n    setIsShowing(false);\r\n    setIsLoadingPanel(true);\r\n  };\r\n\r\n  const onHidePopup = (e) => {\r\n    setIsShowing(false);\r\n    setCheckPopup(null);\r\n  };\r\n  const onShown = () => {\r\n    setIsShowing(true);\r\n  };\r\n  const onShowing = () => {\r\n    if (checkPopup !== null) {\r\n      setTiTlePopup(\"Update Student\");\r\n    } else {\r\n      setTiTlePopup(\"Add Student\");\r\n    }\r\n  };\r\n\r\n  const renderContent = () => {\r\n    return (\r\n      <>\r\n        <form onSubmit={handleSubmit(onSubmitAdjustStudent)}>\r\n          <div style={{ marginBottom: \"10px\" }}>\r\n            <TextField\r\n              fullWidth\r\n              id=\"outlined-basic\"\r\n              label=\"Name Student\"\r\n              variant=\"outlined\"\r\n              {...register(\"nameStudent\", {\r\n                maxLength: 100,\r\n                minLength: 3,\r\n\r\n                required: true,\r\n              })}\r\n            />\r\n            {errors.nameStudent?.type === \"required\" && (\r\n              <p style={{ color: \"red\" }}>This field is required</p>\r\n            )}{\" \"}\r\n            {errors.nameStudent?.type === \"minLength\" && (\r\n              <p style={{ color: \"red\" }}>You are input name invalid</p>\r\n            )}{\" \"}\r\n          </div>\r\n\r\n          <div style={{ marginBottom: \"10px\" }}>\r\n            <TextField\r\n              fullWidth\r\n              id=\"outlined-basic\"\r\n              label=\"Phone Student\"\r\n              variant=\"outlined\"\r\n              {...register(\"phoneStudent\", {\r\n                required: true,\r\n                minLength: 6,\r\n                maxLength: 12,\r\n              })}\r\n            />\r\n\r\n            {errors.phoneStudent?.type === \"required\" && (\r\n              <p style={{ color: \"red\" }}>This field is required</p>\r\n            )}\r\n            {errors.phoneStudent?.type === \"maxLength\" && (\r\n              <p style={{ color: \"red\" }}>Phone Number 10 char</p>\r\n            )}\r\n            {errors.phoneStudent?.type === \"minLength\" && (\r\n              <p style={{ color: \"red\" }}>Phone Number 10 char</p>\r\n            )}\r\n          </div>\r\n\r\n          <div style={{ marginBottom: \"10px\" }}>\r\n            <TextField\r\n              type=\"date\"\r\n              fullWidth\r\n              id=\"outlined-basic\"\r\n              variant=\"outlined\"\r\n              {...register(\"dateOfBirth\", { required: true })}\r\n            />\r\n\r\n            {/* <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n              <DesktopDatePicker\r\n                name=\"dateOfBirth\"\r\n                label=\"Date desktop\"\r\n                inputFormat=\"dd/MM/yyyy\"\r\n                value={date}\r\n                onChange={handleChangeDatetime}\r\n                renderInput={(params) => (\r\n                  <TextField {...register(\"dateOfBirth\")} {...params} />\r\n                )}\r\n              />\r\n            </LocalizationProvider> */}\r\n            {errors.dateOfBirth?.type === \"required\" && (\r\n              <p style={{ color: \"red\" }}>This field is required</p>\r\n            )}\r\n          </div>\r\n\r\n          <div style={{ marginBottom: \"10px\" }}>\r\n            <TextField\r\n              fullWidth\r\n              id=\"outlined-basic\"\r\n              label=\"Score Student\"\r\n              variant=\"outlined\"\r\n              {...register(\"scoreStudent\", {\r\n                required: true,\r\n                minLength: 1,\r\n                maxLength: 2,\r\n              })}\r\n            />\r\n            {errors.phoneStudent?.type === \"maxLength\" && (\r\n              <p style={{ color: \"red\" }}>Score between 0 and 10</p>\r\n            )}\r\n            {errors.scoreStudent?.type === \"required\" && (\r\n              <p style={{ color: \"red\" }}>This field is required</p>\r\n            )}\r\n          </div>\r\n\r\n          <div\r\n            style={{\r\n              display: \"flex\",\r\n              justifyContent: \"space-between\",\r\n              marginTop: \"100px\",\r\n            }}\r\n          >\r\n            <Button type=\"submit\" variant=\"contained\">\r\n              Save\r\n            </Button>\r\n            <Button type=\"reset\" onClick={onHidePopup} variant=\"contained\">\r\n              Cancel\r\n            </Button>\r\n          </div>\r\n        </form>\r\n      </>\r\n    );\r\n  };\r\n  // Process Button: Edit and Remove\r\n\r\n  // Render button and add Row\r\n\r\n  const onRowRemoving = (e) => {\r\n    setIsLoadingPanel(true);\r\n    console.log(\"Key: \" + e.data);\r\n    let data = e.data;\r\n    // deleteMutation.mutate(data.id);\r\n    setTimeout(deleteMutation.mutate(data.id), 50000);\r\n  };\r\n\r\n  const onSaving = React.useCallback((e) => {\r\n    setIsLoadingPanel(true);\r\n  }, []);\r\n  const onInitRow = (e) => {\r\n    e.data.createDate = new Date();\r\n    // e.data.id = Math.ceil(Math.random() * (10000 - 100) + 100);\r\n  };\r\n  const deleteLoading = () => {\r\n    setIsLoadingPanel(true);\r\n  };\r\n  const renderButton = (cell) => {\r\n    ///How to Debugger: Put Break point and add debugger\r\n\r\n    return (\r\n      <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\r\n        <Button\r\n          variant=\"contained\"\r\n          onClick={() => {\r\n            gridRef.current?.instance?.editRow(cell.rowIndex);\r\n            setCheckPopup(cell.data);\r\n          }}\r\n        >\r\n          edit\r\n        </Button>\r\n        <Button\r\n          variant=\"contained\"\r\n          onClick={() => {\r\n            gridRef.current?.instance?.deleteRow(cell.rowIndex);\r\n            deleteLoading();\r\n          }}\r\n        >\r\n          remove\r\n        </Button>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const renderTitle = () => {\r\n    return <p>{TiTlePopup}</p>;\r\n  };\r\nconsole.log(\"Get Data Loading: \"+isLoadingStudent)\r\n\r\nconsole.log(\"Create Loading: \"+createMutation.isLoading)\r\nconsole.log(\"Delete Loading: \"+deleteMutation.isLoading)\r\n\r\n  return (\r\n    <>\r\n      {/* {isLoadingStudent ? (\r\n        <div>Loading...</div>\r\n      ) : isErrorStudent ? (\r\n        <div>An error while fetching posts</div>\r\n      ) : ( */}\r\n      <div>\r\n        <div className=\"main__title\">\r\n          <h1>Manage Data Student</h1>\r\n        </div>\r\n\r\n        <div className=\"main__Add\"></div>\r\n        <div className=\"main__body\">\r\n          <DataGrid\r\n            id=\"dataGrid\"\r\n            dataSource={dataStudent || []}\r\n            remoteOperations={true}\r\n            ref={gridRef}\r\n            onRowRemoving={onRowRemoving}\r\n            // onSaving={onSaving}\r\n            onInitNewRow={onInitRow}\r\n          >\r\n            <LoadPanel\r\n            id=\"dataGrid\"\r\n              position=\"right\"\r\n              shadingColor=\"rgba(0,0,0,1)\"\r\n              visible={isLoadingStudent||createMutation.isLoading||deleteMutation.isLoading}\r\n              showIndicator={true}\r\n              shading={true}\r\n              showPane={true}\r\n             \r\n            />\r\n            <Scrolling rowRenderingMode=\"virtual\"></Scrolling>\r\n            <Paging defaultPageSize={5} />\r\n            <Pager\r\n              visible={true}\r\n              allowedPageSizes={allowedPageSizes}\r\n              displayMode=\"compact\"\r\n            />\r\n            <Editing mode=\"popup\" useIcons={true}>\r\n              <Popup\r\n                showTitle={true}\r\n                width={700}\r\n                height={725}\r\n                visible={isShowing}\r\n                titleRender={renderTitle}\r\n                onShown={onShown}\r\n                onShowing={onShowing}\r\n                // Customize Popup\r\n                contentRender={renderContent}\r\n              >\r\n                <ToolbarItem />\r\n              </Popup>\r\n              <TextField label=\"Student\"></TextField>\r\n            </Editing>\r\n            {/* Create Column include Add Remove Update */}\r\n            <Column cellRender={renderButton} dataField=\"\" />\r\n            <Column dataField=\"nameStudent\" dataType=\"string\" />\r\n            <Column dataField=\"phoneStudent\" dataType=\"string\" />\r\n            <Column\r\n              dataField=\"dateOfBirth\"\r\n              dataType=\"date\"\r\n              format=\"dd/MM/yyyy\"\r\n            />\r\n            <Column\r\n              dataField=\"createDate\"\r\n              dataType=\"date\"\r\n              visible={false}\r\n              defaultSortOrder=\"asc\"\r\n            />\r\n            <Column dataField=\"scoreStudent\" dataType=\"number\" />\r\n            <Toolbar>\r\n              <Item>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  onClick={() => gridRef.current?.instance?.addRow()}\r\n                >\r\n                  add\r\n                </Button>\r\n              </Item>\r\n            </Toolbar>\r\n          </DataGrid>\r\n        </div>\r\n\r\n        {/* ///React Hook Form + Material Setup */}\r\n      </div>\r\n      {/* )} */}\r\n    </>\r\n  );\r\n};\r\n//Create content customize Form\r\n\r\nexport default PopUpStudent;\r\n","F:\\ThucTapReactJS\\my-app\\src\\components\\CellStudent\\index.js",["96","97","98","99","100","101","102","103"],"import \"devextreme/dist/css/dx.common.css\";\r\nimport \"devextreme/dist/css/dx.light.css\";\r\nimport React, { useEffect, useState, useRef, useCallback } from \"react\";\r\nimport ArrayStore from \"devextreme/data/array_store\";\r\nimport DataSource from \"devextreme/data/data_source\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport { LoadPanel } from \"devextreme-react/load-panel\";\r\n\r\nimport \"./CellStudent.css\";\r\nimport DataGrid, {\r\n  Column,\r\n  Paging,\r\n  Pager,\r\n  Editing,\r\n  Popup,\r\n  Toolbar,\r\n  Item,\r\n  ToolbarItem,\r\n  RequiredRule,\r\n} from \"devextreme-react/data-grid\";\r\nimport { TextField, Button } from \"@material-ui/core\";\r\n\r\nimport { toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport useGetData from \"./hooks/useGetData\";\r\nimport useDeleteData from \"./../PopUpStudent/hooks/useDeleteData\";\r\nimport useCreateData from \"./../PopUpStudent/hooks/useCreateData\";\r\nimport useUpdateData from \"./../PopUpStudent/hooks/useUpdateData\";\r\n/////////\r\ntoast.configure();\r\n\r\nconst CellStudent = () => {\r\n  const { data, isLoading, refetch } = useGetData();\r\n  //State\r\n\r\n  const [changes, setChanges] = useState([]);\r\n  const [changesTempUpdate, setChangesTempUpdate] = useState([]);\r\n\r\n  // Save params\r\n  const gridRef = useRef(null);\r\n  const studentDataSource = new DataSource({\r\n    store: new ArrayStore({\r\n      key: \"id\",\r\n      data: data,\r\n\r\n      // Other ArrayStore properties go here\r\n    }),\r\n    // Other DataSource properties go here\r\n\r\n    reshapeOnPush: true,\r\n  });\r\n\r\n  const arrTemp = [];\r\n\r\n  const createMutation = useCreateData();\r\n\r\n  const deleteMutation = useDeleteData();\r\n  const renderButton = (cell) => {\r\n    return (\r\n      <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\r\n        <Button\r\n          variant=\"contained\"\r\n          onClick={() => {\r\n            gridRef.current?.instance?.deleteRow(cell.rowIndex);\r\n          }}\r\n        >\r\n          remove\r\n        </Button>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const onChangesChange = React.useCallback((changes) => {\r\n    setChanges(changes);\r\n  }, []);\r\n\r\n  const onCellClick = (e) => {\r\n    gridRef.current?.instance?.editCell(e.rowIndex, e.columnIndex);\r\n  };\r\n\r\n  const onInitRow = (e) => {\r\n    e.data.createDate = new Date();\r\n  };\r\n  const onRowRemoved = (e) => {\r\n    let data = e.data;\r\n    let state = changesTempUpdate;\r\n    if (state.length > 0) {\r\n      const removeItemDuplicate = state.filter(\r\n        (item) => item.key.__KEY__ !== data.__KEY__\r\n      );\r\n\r\n      setChangesTempUpdate(removeItemDuplicate);\r\n    }\r\n    deleteMutation.mutate(data.id);\r\n  };\r\n  const onSaved = React.useCallback(\r\n    (e) => {\r\n      let data = e.changes;\r\n\r\n      if (data[0].type === \"update\") {\r\n        let state = changesTempUpdate;\r\n        if (state.length > 0) {\r\n          const removeItemDuplicate = state.filter(\r\n            (item) => item.key.id !== data[0].key.id\r\n          );\r\n          removeItemDuplicate.push(data[0]);\r\n          setChangesTempUpdate(removeItemDuplicate);\r\n        } else if (state.length === 0) {\r\n          state.push(data[0]);\r\n          setChangesTempUpdate(state);\r\n        }\r\n      } else if (data[0].type === \"insert\") {\r\n        let state = changesTempUpdate;\r\n        state.push(data[0].data);\r\n        setChangesTempUpdate(state);\r\n      }\r\n    },\r\n    [changesTempUpdate]\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <div>\r\n        <div className=\"main__title\">\r\n          <h1>Manage Data Student</h1>\r\n        </div>\r\n\r\n        <div className=\"main__Add\"></div>\r\n        <div className=\"main__body\">\r\n          <DataGrid\r\n            dataSource={data}\r\n            ref={gridRef}\r\n            onCellClick={onCellClick}\r\n            onInitNewRow={onInitRow}\r\n            onRowRemoved={onRowRemoved}\r\n            onSaved={onSaved}\r\n          >\r\n            <LoadPanel\r\n              id=\"dataGrid\"\r\n              position=\"right\"\r\n              shadingColor=\"rgba(0,0,0,1)\"\r\n              visible={isLoading || createMutation.isLoading}\r\n              showIndicator={true}\r\n              shading={true}\r\n              showPane={true}\r\n            />\r\n            <Editing\r\n              mode=\"cell\"\r\n              useIcons={true}\r\n              changes={changes}\r\n              onChangesChange={onChangesChange}\r\n              // startEditAction\r\n              // selectTextOnEditStart={true}\r\n            >\r\n              <TextField label=\"Student\"></TextField>\r\n            </Editing>\r\n            <Column dataField=\"nameStudent\" dataType=\"string\">\r\n              {\" \"}\r\n              <RequiredRule />\r\n            </Column>\r\n            <Column dataField=\"phoneStudent\" dataType=\"string\">\r\n              {\" \"}\r\n              <RequiredRule />\r\n            </Column>\r\n            <Column dataField=\"dateOfBirth\" dataType=\"date\" format=\"dd/MM/yyyy\">\r\n              {\" \"}\r\n              <RequiredRule />\r\n            </Column>\r\n            <Column\r\n              dataField=\"createDate\"\r\n              dataType=\"date\"\r\n              visible={false}\r\n              defaultSortOrder=\"asc\"\r\n            />\r\n\r\n            <Column dataField=\"scoreStudent\" dataType=\"number\">\r\n              {\" \"}\r\n              <RequiredRule />\r\n            </Column>\r\n            <Column dataField=\"\" cellRender={renderButton}></Column>\r\n\r\n            <Toolbar>\r\n              <Item location=\"after\">\r\n                <Button\r\n                  variant=\"contained\"\r\n                  icon=\"refresh\"\r\n                  onClick={() => {\r\n                    refetch();\r\n                    toast(\"🦄 You are refetched\", {\r\n                      position: \"top-right\",\r\n                      autoClose: 5000,\r\n                      hideProgressBar: false,\r\n                      closeOnClick: true,\r\n                      pauseOnHover: true,\r\n                      draggable: true,\r\n                      progress: undefined,\r\n                    });\r\n                  }}\r\n                >\r\n                  refetch\r\n                </Button>\r\n              </Item>\r\n\r\n              <Item location=\"after\">\r\n                <Button\r\n                  variant=\"contained\"\r\n                  icon=\"refresh\"\r\n                  // onClick={() => gridRef.current?.instance?.saveEditData()}\r\n                  onClick={() => {\r\n                    if (changesTempUpdate.length > 0) {\r\n                      createMutation.mutate(changesTempUpdate);\r\n                    }\r\n                    setChangesTempUpdate([]);\r\n                    console.log(\r\n                      \"Changes Temp onSaving Outsite \" +\r\n                        JSON.stringify(changesTempUpdate)\r\n                    );\r\n                  }}\r\n                  viable={false}\r\n                >\r\n                  Save\r\n                </Button>\r\n              </Item>\r\n              <Item>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  onClick={() => gridRef.current?.instance?.addRow()}\r\n                >\r\n                  add\r\n                </Button>\r\n              </Item>\r\n            </Toolbar>\r\n            <Paging defaultPageSize={12} />\r\n            <Pager showPageSizeSelector={true} />\r\n          </DataGrid>\r\n        </div>\r\n\r\n        {/* ///React Hook Form + Material Setup */}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n//Create content customize Form\r\n\r\nexport default CellStudent;\r\n","F:\\ThucTapReactJS\\my-app\\src\\components\\BatchStudent\\index.js",["104","105","106","107","108","109","110","111","112","113","114"],"import \"devextreme/dist/css/dx.common.css\";\r\nimport \"devextreme/dist/css/dx.light.css\";\r\nimport React, { useEffect, useState, useRef, useCallback } from \"react\";\r\nimport ArrayStore from \"devextreme/data/array_store\";\r\nimport DataSource from \"devextreme/data/data_source\";\r\nimport { LoadPanel } from \"devextreme-react/load-panel\";\r\n\r\nimport \"./BatchStudent.css\";\r\nimport DataGrid, {\r\n  Column,\r\n  Paging,\r\n  Pager,\r\n  Editing,\r\n  Popup,\r\n  Toolbar,\r\n  Item,\r\n  RequiredRule,\r\n} from \"devextreme-react/data-grid\";\r\nimport { TextField, Button } from \"@material-ui/core\";\r\n\r\nimport { useForm, Controller } from \"react-hook-form\";\r\n\r\n// Toast\r\nimport { toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport useGetData from \"./../PopUpStudent/hooks/useGetData\";\r\nimport useDeleteData from \"./../PopUpStudent/hooks/useDeleteData\";\r\nimport useCreateData from \"./../PopUpStudent/hooks/useCreateData\";\r\nimport useUpdateData from \"./../PopUpStudent/hooks/useUpdateData\";\r\nconst allowedPageSizes = [5, 10, \"all\"];\r\n\r\n/////////\r\ntoast.configure();\r\nconst BatchStudent = () => {\r\n  const {\r\n    refetchStudent,\r\n\r\n    dataStudent,\r\n    isErrorStudent,\r\n    isLoadingStudent,\r\n  } = useGetData();\r\n  const studentDataSource = new DataSource({\r\n    store: new ArrayStore({\r\n      key: \"id\",\r\n      data: dataStudent,\r\n\r\n      // Other ArrayStore properties go here\r\n    }),\r\n    // Other DataSource properties go here\r\n\r\n    reshapeOnPush: true,\r\n  });\r\n  //State\r\n  const [isLoadingPanel, setIsLoadingPanel] = useState(false);\r\n\r\n  const [changes, setChanges] = useState([]);\r\n  const [editRowKey, setEditRowKey] = useState(null);\r\n  const createMutation = useCreateData();\r\n  const updateMutation = useUpdateData();\r\n  const deleteMutation = useDeleteData();\r\n  // Save params\r\n  const gridRef = useRef(null);\r\n\r\n  const renderButton = (cell) => {\r\n    return (\r\n      <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\r\n        <Button\r\n          variant=\"contained\"\r\n          onClick={() => {\r\n            gridRef.current?.instance?.deleteRow(cell.rowIndex);\r\n          }}\r\n        >\r\n          remove\r\n        </Button>\r\n        <Button\r\n          variant=\"contained\"\r\n          // disabled={isAddButtonVisible}\r\n          onClick={() => {\r\n            gridRef.current?.instance?.undeleteRow(cell.rowIndex);\r\n          }}\r\n        >\r\n          unremove\r\n        </Button>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const onChangesChange = React.useCallback((changes) => {\r\n    console.log(\"change: \" + changes);\r\n    setChanges(changes);\r\n  }, []);\r\n  const onCellClick = (e) => {\r\n    gridRef.current?.instance?.editCell(e.rowIndex, e.columnIndex);\r\n  };\r\n\r\n  // Note usually that Create Field default when add row\r\n  const onInitRow = (e) => {\r\n    e.data.createDate = new Date();\r\n    // e.data.id = Math.ceil(Math.random() * (10000 - 100) + 100);\r\n  };\r\n  const onEditRowKeyChange = React.useCallback((editRowKey) => {\r\n    console.log(editRowKey);\r\n    setEditRowKey(editRowKey);\r\n  }, []);\r\n  const onSaving = React.useCallback(\r\n    (e) => {\r\n      // e.cancel = true;\r\n      debugger;\r\n\r\n      const data = e.changes;\r\n      createMutation.mutate(data);\r\n\r\n      // for (let i = 0; i < data.length; i++) {\r\n      //   if (data[i].type === \"insert\") {\r\n      //     createMutation.mutate(data[i].data);\r\n\r\n      //     console.log(\"INSERT\");\r\n      //   } else if (data[i].type === \"update\") {\r\n      //     updateMutation.mutate(data[i].data);\r\n\r\n      //     console.log(\"UPDATE\");\r\n      //   } else {\r\n      //     deleteMutation.mutate(data[i].key.id);\r\n      //     console.log(\"REMOVE\");\r\n      //   }\r\n      // }\r\n    },\r\n    []\r\n  );\r\n\r\n  return isLoadingStudent ? (\r\n    <div>Loading...</div>\r\n  ) : isErrorStudent ? (\r\n    <div>An error while fetching posts</div>\r\n  ) : (\r\n    <div>\r\n      <div className=\"main__title\">\r\n        <h1>Manage Data Student</h1>\r\n      </div>\r\n\r\n      <div className=\"main__Add\"></div>\r\n      <div className=\"main__body\">\r\n        <DataGrid\r\n          // keyExpr=\"id\"\r\n          showBorders\r\n          dataSource={dataStudent}\r\n          remoteOperations={true}\r\n          ref={gridRef}\r\n          repaintChangesOnly={true}\r\n          onCellClick={onCellClick}\r\n          onInitNewRow={onInitRow}\r\n          onSaving={onSaving}\r\n          loadPanel\r\n        >\r\n          <LoadPanel\r\n            shadingColor=\"rgba(0,0,0,0.4)\"\r\n            visible={isLoadingPanel}\r\n            showIndicator={true}\r\n            shading={true}\r\n            showPane={true}\r\n          />\r\n          <Paging defaultPageSize={5} />\r\n          <Pager\r\n            visible={true}\r\n            allowedPageSizes={allowedPageSizes}\r\n            displayMode=\"compact\"\r\n          />\r\n          <Editing\r\n            mode=\"batch\"\r\n            useIcons={true}\r\n            changes={changes}\r\n            onChangesChange={onChangesChange}\r\n            editRowKey={editRowKey}\r\n            onEditRowKeyChange={onEditRowKeyChange}\r\n          >\r\n            <TextField label=\"Student\"></TextField>\r\n          </Editing>\r\n\r\n          <Column dataField=\"nameStudent\" dataType=\"string\">\r\n            {\" \"}\r\n            <RequiredRule />\r\n          </Column>\r\n          <Column dataField=\"phoneStudent\" dataType=\"string\">\r\n            {\" \"}\r\n            <RequiredRule />\r\n          </Column>\r\n          <Column dataField=\"dateOfBirth\" dataType=\"date\" format=\"dd/MM/yyyy\">\r\n            {\" \"}\r\n            <RequiredRule />\r\n          </Column>\r\n          <Column\r\n            dataField=\"createDate\"\r\n            dataType=\"date\"\r\n            visible={false}\r\n            defaultSortOrder=\"asc\"\r\n            // value={date}\r\n          />\r\n\r\n          <Column dataField=\"scoreStudent\" dataType=\"number\">\r\n            {\" \"}\r\n            <RequiredRule />\r\n          </Column>\r\n          <Column dataField=\"\" cellRender={renderButton}></Column>\r\n\r\n          <Toolbar>\r\n            <Item location=\"after\">\r\n              <Button\r\n                variant=\"contained\"\r\n                icon=\"refresh\"\r\n                onClick={() => gridRef.current?.instance?.cancelEditData()}\r\n              >\r\n                Discard\r\n              </Button>\r\n            </Item>\r\n            <Item location=\"after\">\r\n              <Button\r\n                variant=\"contained\"\r\n                icon=\"refresh\"\r\n                onClick={() => {\r\n                  gridRef.current?.instance?.saveEditData();\r\n                }}\r\n                viable={false}\r\n              >\r\n                Save\r\n              </Button>\r\n            </Item>\r\n            <Item>\r\n              <Button\r\n                variant=\"contained\"\r\n                onClick={() => gridRef.current?.instance?.addRow()}\r\n              >\r\n                add\r\n              </Button>\r\n            </Item>\r\n          </Toolbar>\r\n        </DataGrid>\r\n      </div>\r\n\r\n      {/* ///React Hook Form + Material Setup */}\r\n    </div>\r\n  );\r\n};\r\n//Create content customize Form\r\n\r\nexport default BatchStudent;\r\n","F:\\ThucTapReactJS\\my-app\\src\\components\\FormStudent\\index.js",["115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130"],"import \"devextreme/dist/css/dx.common.css\";\r\nimport \"devextreme/dist/css/dx.light.css\";\r\nimport React, { useEffect, useState, useRef, useCallback } from \"react\";\r\nimport ArrayStore from \"devextreme/data/array_store\";\r\nimport DataSource from \"devextreme/data/data_source\";\r\nimport \"./FormStudent.css\";\r\nimport DataGrid, {\r\n  Column,\r\n  Paging,\r\n  Pager,\r\n  Editing,\r\n  Popup,\r\n  Toolbar,\r\n  Item,\r\n  ToolbarItem,\r\n} from \"devextreme-react/data-grid\";\r\nimport { TextField, Button } from \"@material-ui/core\";\r\n\r\nimport { useForm, Controller } from \"react-hook-form\";\r\n\r\n// Toast\r\nimport { toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nconst data = [\r\n  {\r\n    dateOfBirth: \"2000-01-02\",\r\n    nameStudent: \"Nguyễn Thanh Huy\",\r\n    phoneStudent: \"092365124\",\r\n\r\n    scoreStudent: 10,\r\n    id: \"1\",\r\n  },\r\n  {\r\n    dateOfBirth: \"2000-10-09\",\r\n    nameStudent: \"Nguyễn Thị Đào\",\r\n    phoneStudent: \"0902554175\",\r\n\r\n    scoreStudent: 1,\r\n    id: \"12\",\r\n  },\r\n  {\r\n    dateOfBirth: \"1960-12-29\",\r\n    nameStudent: \"Trần Văn Thời\",\r\n    phoneStudent: \"09025541541\",\r\n\r\n    scoreStudent: 10,\r\n    id: \"112\",\r\n  },\r\n];\r\n\r\nconst studentDataSource = new DataSource({\r\n  store: new ArrayStore({\r\n    key: \"id\",\r\n    data: data,\r\n\r\n    // Other ArrayStore properties go here\r\n  }),\r\n  // Other DataSource properties go here\r\n\r\n  reshapeOnPush: true,\r\n});\r\n\r\n/////////\r\ntoast.configure();\r\nconst FormStudent = () => {\r\n  //State\r\n  const [changes, setChanges] = useState([]);\r\n  const [editRowKey, setEditRowKey] = useState(null);\r\n  const [isRemove, setIsRemove] = useState(true);\r\n \r\n  const [date, setDate] = React.useState(new Date());\r\n  // Save params\r\n  const gridRef = useRef(null);\r\n\r\n  \r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    control,\r\n    setValue,\r\n    formState: { errors, isSubmitSuccessful },\r\n  } = useForm({ defaultValues: { something: \"anything\" } });\r\n\r\n  const customizeColumns = (columns) => {};\r\n  const renderButton = (cell) => {\r\n    return (\r\n      <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\r\n        {/* <Button\r\n          variant=\"contained\"\r\n          onClick={() => {\r\n            gridRef.current?.instance?.editCell(cell.rowIndex,cell.columnIndex);\r\n          }}\r\n        >\r\n          edit\r\n        </Button> */}\r\n        <Button\r\n        \r\n          variant=\"contained\"\r\n          onClick={() => {\r\n            gridRef.current?.instance?.deleteRow(cell.rowIndex);\r\n         \r\n          }}\r\n        >\r\n          remove\r\n        </Button>\r\n        <Button\r\n          variant=\"contained\"\r\n          // disabled={isAddButtonVisible}\r\n          onClick={() => {\r\n            gridRef.current?.instance?.undeleteRow(cell.rowIndex);\r\n          }}\r\n        >\r\n          unremove\r\n        </Button>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const onChangesChange = React.useCallback((changes) => {\r\n    setChanges(changes);\r\n  }, []);\r\n  \r\n  \r\n  \r\n  return (\r\n    <div>\r\n      <div className=\"main__title\">\r\n        <h1>Manage Data Student</h1>\r\n      </div>\r\n\r\n      <div className=\"main__Add\"></div>\r\n      <div className=\"main__body\">\r\n        <DataGrid\r\n          dataSource={studentDataSource}\r\n          remoteOperations={true}\r\n          ref={gridRef}\r\n          customizeColumns={customizeColumns}\r\n          repaintChangesOnly={true}\r\n          newRowPosition\r\n          \r\n        >\r\n          <Editing\r\n            mode=\"form\"\r\n            useIcons={true}\r\n            changes={changes}\r\n            onChangesChange={onChangesChange}\r\n            // editRowKey={editRowKey}\r\n            // onEditRowKeyChange={onEditRowKeyChange}\r\n            startEditAction\r\n            selectTextOnEditStart={true}\r\n          >\r\n            <TextField label=\"Student\"></TextField>\r\n          </Editing>\r\n          {/* Create Column include Add Remove Update */}\r\n          {/* <Column cellRender={renderButton} dataField=\"\" /> */}\r\n          {/* <Column dataField=\"id\" /> */}\r\n          <Column dataField=\"nameStudent\" dataType=\"string\" />\r\n          <Column dataField=\"phoneStudent\" dataType=\"string\" />\r\n          <Column dataField=\"dateOfBirth\" dataType=\"date\" format=\"dd/MM/yyyy\" />\r\n          <Column\r\n            dataField=\"createDate\"\r\n            dataType=\"date\"\r\n            visible={true}\r\n            defaultSortOrder=\"asc\"\r\n            value={date}\r\n          />\r\n\r\n          <Column dataField=\"scoreStudent\" dataType=\"number\" />\r\n          <Column dataField=\"\" cellRender={renderButton}></Column>\r\n\r\n          <Toolbar>\r\n            <Item location=\"after\">\r\n              <Button\r\n                variant=\"contained\"\r\n                icon=\"refresh\"\r\n                onClick={() => gridRef.current?.instance?.cancelEditData()}\r\n              >\r\n                Discard\r\n              </Button>\r\n            </Item>\r\n            <Item location=\"after\">\r\n              <Button\r\n                variant=\"contained\"\r\n                icon=\"refresh\"\r\n                onClick={() => gridRef.current?.instance?.saveEditData()}\r\n                viable={false}\r\n              >\r\n                Save\r\n              </Button>\r\n            </Item>\r\n            <Item>\r\n              <Button\r\n                variant=\"contained\"\r\n                onClick={() => gridRef.current?.instance?.addRow()}\r\n                \r\n              >\r\n                add\r\n              </Button>\r\n            </Item>\r\n          </Toolbar>\r\n          <Paging defaultPageSize={12} />\r\n          <Pager showPageSizeSelector={true} />\r\n        </DataGrid>\r\n      </div>\r\n\r\n      {/* ///React Hook Form + Material Setup */}\r\n    </div>\r\n  );\r\n};\r\n//Create content customize Form\r\n\r\nexport default FormStudent;\r\n","F:\\ThucTapReactJS\\my-app\\src\\components\\PopUpStudent\\hooks\\useGetData.js",["131","132","133"],"////Applications\r\nimport axios from \"axios\";\r\nimport { useQuery } from \"react-query\";\r\n\r\nimport { fetchStudentsKey } from \"../../../util/queryKeys\";\r\nconst fetchStudents = async () => {\r\n  \r\n  const res = await axios.get(`http://127.0.0.1:8000/students`);\r\n  return res?.data;\r\n};\r\n///creat function\r\nconst useGetData = () => {\r\n  const query = useQuery(fetchStudentsKey, fetchStudents);\r\n  const {\r\n    isLoading: isLoadingStudent,\r\n    isError: isErrorStudent,\r\n    isSuccess: isSuccessStudent,\r\n    refetch: refetchStudent,\r\n    remove: removeStudent,\r\n    data: dataStudent,\r\n    error: errorStudent,\r\n  } = query;\r\n  return { dataStudent, isLoadingStudent, refetchStudent, removeStudent, dataStudent, errorStudent };\r\n};\r\nexport default useGetData;\r\n","F:\\ThucTapReactJS\\my-app\\src\\components\\PopUpStudent\\hooks\\useCreateData.js",[],"F:\\ThucTapReactJS\\my-app\\src\\components\\PopUpStudent\\hooks\\useDeleteData.js",[],"F:\\ThucTapReactJS\\my-app\\src\\components\\PopUpStudent\\hooks\\useGetDataByPaging.js",["134","135","136"],"////Applications\r\nimport axios from \"axios\";\r\nimport { useQuery } from \"react-query\";\r\n\r\nimport { fetchStudentsKeyByPage } from \"../../../util/queryKeys\";\r\nconst fetchStudentsByPage = async (_pageSize, _pageIndex) => {\r\n  const res = await axios.get(\r\n    `http://127.0.0.1:8000/students-paging/${_pageSize}/${_pageIndex}`\r\n  );\r\n  return res?.data;\r\n};\r\n///creat function\r\nconst useGetDataByPaging = (pageSize, pageIndex) => {\r\n  const query = useQuery(\r\n    [fetchStudentsKeyByPage, pageSize, pageIndex],\r\n    fetchStudentsByPage(pageSize, pageIndex)\r\n  );\r\n\r\n  const {\r\n    isLoading: isLoadingStudentByPaging,\r\n    isError: isErrorStudentByPaging,\r\n    isSuccess: isSuccessStudentByPaging,\r\n    refetch: refetchStudentByPaging,\r\n    remove: removeStudentByPaging,\r\n    data: dataStudentByPaging,\r\n    error: errorStudentByPaging,\r\n  } = query;\r\n  return {\r\n    dataStudentByPaging,\r\n    isLoadingStudentByPaging,\r\n    refetchStudentByPaging,\r\n    removeStudentByPaging,\r\n    dataStudentByPaging,\r\n    errorStudentByPaging,\r\n  };\r\n};\r\nexport default useGetDataByPaging;\r\n","F:\\ThucTapReactJS\\my-app\\src\\components\\CellStudent\\hooks\\useGetData.js",["137","138","139"],"////Applications\r\nimport axios from \"axios\";\r\nimport { useQuery } from \"react-query\";\r\n\r\nimport { fetchStudentsKey } from \"../../../util/queryKeys\";\r\nconst fetchStudents = async () => {\r\n  const res = await axios.get(`http://127.0.0.1:8000/students`);\r\n  return res?.data;\r\n};\r\nconst useGetData = () => {\r\n    const  { isLoading, isError, isSuccess, refetch, remove, data, error } =\r\n    useQuery(fetchStudentsKey, fetchStudents);\r\n  return {data,isLoading,refetch,remove,data,error};\r\n};\r\nexport default useGetData;\r\n","F:\\ThucTapReactJS\\my-app\\src\\components\\PopUpStudent\\hooks\\useUpdateData.js",[],"F:\\ThucTapReactJS\\my-app\\src\\util\\queryKeys.js",[],{"ruleId":"140","replacedBy":"141"},{"ruleId":"142","replacedBy":"143"},{"ruleId":"144","severity":1,"message":"145","line":1,"column":8,"nodeType":"146","messageId":"147","endLine":1,"endColumn":12},{"ruleId":"144","severity":1,"message":"148","line":8,"column":8,"nodeType":"146","messageId":"147","endLine":8,"endColumn":19},{"ruleId":"144","severity":1,"message":"149","line":3,"column":46,"nodeType":"146","messageId":"147","endLine":3,"endColumn":57},{"ruleId":"144","severity":1,"message":"150","line":23,"column":19,"nodeType":"146","messageId":"147","endLine":23,"endColumn":29},{"ruleId":"144","severity":1,"message":"151","line":30,"column":8,"nodeType":"146","messageId":"147","endLine":30,"endColumn":25},{"ruleId":"144","severity":1,"message":"152","line":42,"column":5,"nodeType":"146","messageId":"147","endLine":42,"endColumn":19},{"ruleId":"144","severity":1,"message":"153","line":45,"column":5,"nodeType":"146","messageId":"147","endLine":45,"endColumn":19},{"ruleId":"144","severity":1,"message":"154","line":53,"column":10,"nodeType":"146","messageId":"147","endLine":53,"endColumn":14},{"ruleId":"144","severity":1,"message":"155","line":53,"column":16,"nodeType":"146","messageId":"147","endLine":53,"endColumn":23},{"ruleId":"144","severity":1,"message":"156","line":54,"column":10,"nodeType":"146","messageId":"147","endLine":54,"endColumn":24},{"ruleId":"144","severity":1,"message":"157","line":75,"column":5,"nodeType":"146","messageId":"147","endLine":75,"endColumn":12},{"ruleId":"144","severity":1,"message":"158","line":77,"column":26,"nodeType":"146","messageId":"147","endLine":77,"endColumn":44},{"ruleId":"159","severity":1,"message":"160","line":87,"column":6,"nodeType":"161","endLine":87,"endColumn":18,"suggestions":"162"},{"ruleId":"144","severity":1,"message":"163","line":101,"column":11,"nodeType":"146","messageId":"147","endLine":101,"endColumn":20},{"ruleId":"144","severity":1,"message":"164","line":101,"column":22,"nodeType":"146","messageId":"147","endLine":101,"endColumn":29},{"ruleId":"144","severity":1,"message":"165","line":101,"column":31,"nodeType":"146","messageId":"147","endLine":101,"endColumn":36},{"ruleId":"144","severity":1,"message":"166","line":101,"column":38,"nodeType":"146","messageId":"147","endLine":101,"endColumn":47},{"ruleId":"144","severity":1,"message":"167","line":275,"column":9,"nodeType":"146","messageId":"147","endLine":275,"endColumn":17},{"ruleId":"144","severity":1,"message":"168","line":3,"column":17,"nodeType":"146","messageId":"147","endLine":3,"endColumn":26},{"ruleId":"144","severity":1,"message":"149","line":3,"column":46,"nodeType":"146","messageId":"147","endLine":3,"endColumn":57},{"ruleId":"144","severity":1,"message":"169","line":6,"column":16,"nodeType":"146","messageId":"147","endLine":6,"endColumn":22},{"ruleId":"144","severity":1,"message":"170","line":15,"column":3,"nodeType":"146","messageId":"147","endLine":15,"endColumn":8},{"ruleId":"144","severity":1,"message":"171","line":18,"column":3,"nodeType":"146","messageId":"147","endLine":18,"endColumn":14},{"ruleId":"144","severity":1,"message":"172","line":28,"column":8,"nodeType":"146","messageId":"147","endLine":28,"endColumn":21},{"ruleId":"144","severity":1,"message":"173","line":41,"column":9,"nodeType":"146","messageId":"147","endLine":41,"endColumn":26},{"ruleId":"144","severity":1,"message":"174","line":53,"column":9,"nodeType":"146","messageId":"147","endLine":53,"endColumn":16},{"ruleId":"144","severity":1,"message":"168","line":3,"column":17,"nodeType":"146","messageId":"147","endLine":3,"endColumn":26},{"ruleId":"144","severity":1,"message":"149","line":3,"column":46,"nodeType":"146","messageId":"147","endLine":3,"endColumn":57},{"ruleId":"144","severity":1,"message":"170","line":14,"column":3,"nodeType":"146","messageId":"147","endLine":14,"endColumn":8},{"ruleId":"144","severity":1,"message":"175","line":21,"column":10,"nodeType":"146","messageId":"147","endLine":21,"endColumn":17},{"ruleId":"144","severity":1,"message":"150","line":21,"column":19,"nodeType":"146","messageId":"147","endLine":21,"endColumn":29},{"ruleId":"144","severity":1,"message":"152","line":36,"column":5,"nodeType":"146","messageId":"147","endLine":36,"endColumn":19},{"ruleId":"144","severity":1,"message":"173","line":42,"column":9,"nodeType":"146","messageId":"147","endLine":42,"endColumn":26},{"ruleId":"144","severity":1,"message":"176","line":54,"column":26,"nodeType":"146","messageId":"147","endLine":54,"endColumn":43},{"ruleId":"144","severity":1,"message":"177","line":59,"column":9,"nodeType":"146","messageId":"147","endLine":59,"endColumn":23},{"ruleId":"144","severity":1,"message":"178","line":60,"column":9,"nodeType":"146","messageId":"147","endLine":60,"endColumn":23},{"ruleId":"159","severity":1,"message":"179","line":128,"column":5,"nodeType":"161","endLine":128,"endColumn":7,"suggestions":"180"},{"ruleId":"144","severity":1,"message":"168","line":3,"column":17,"nodeType":"146","messageId":"147","endLine":3,"endColumn":26},{"ruleId":"144","severity":1,"message":"149","line":3,"column":46,"nodeType":"146","messageId":"147","endLine":3,"endColumn":57},{"ruleId":"144","severity":1,"message":"170","line":12,"column":3,"nodeType":"146","messageId":"147","endLine":12,"endColumn":8},{"ruleId":"144","severity":1,"message":"171","line":15,"column":3,"nodeType":"146","messageId":"147","endLine":15,"endColumn":14},{"ruleId":"144","severity":1,"message":"150","line":19,"column":19,"nodeType":"146","messageId":"147","endLine":19,"endColumn":29},{"ruleId":"144","severity":1,"message":"181","line":68,"column":10,"nodeType":"146","messageId":"147","endLine":68,"endColumn":20},{"ruleId":"144","severity":1,"message":"182","line":68,"column":22,"nodeType":"146","messageId":"147","endLine":68,"endColumn":35},{"ruleId":"144","severity":1,"message":"183","line":69,"column":10,"nodeType":"146","messageId":"147","endLine":69,"endColumn":18},{"ruleId":"144","severity":1,"message":"184","line":69,"column":20,"nodeType":"146","messageId":"147","endLine":69,"endColumn":31},{"ruleId":"144","severity":1,"message":"185","line":71,"column":16,"nodeType":"146","messageId":"147","endLine":71,"endColumn":23},{"ruleId":"144","severity":1,"message":"186","line":77,"column":5,"nodeType":"146","messageId":"147","endLine":77,"endColumn":13},{"ruleId":"144","severity":1,"message":"187","line":78,"column":5,"nodeType":"146","messageId":"147","endLine":78,"endColumn":17},{"ruleId":"144","severity":1,"message":"157","line":79,"column":5,"nodeType":"146","messageId":"147","endLine":79,"endColumn":12},{"ruleId":"144","severity":1,"message":"188","line":80,"column":5,"nodeType":"146","messageId":"147","endLine":80,"endColumn":13},{"ruleId":"144","severity":1,"message":"189","line":81,"column":18,"nodeType":"146","messageId":"147","endLine":81,"endColumn":24},{"ruleId":"144","severity":1,"message":"158","line":81,"column":26,"nodeType":"146","messageId":"147","endLine":81,"endColumn":44},{"ruleId":"144","severity":1,"message":"153","line":16,"column":14,"nodeType":"146","messageId":"147","endLine":16,"endColumn":28},{"ruleId":"144","severity":1,"message":"190","line":17,"column":16,"nodeType":"146","messageId":"147","endLine":17,"endColumn":32},{"ruleId":"191","severity":1,"message":"192","line":23,"column":74,"nodeType":"193","messageId":"194","endLine":23,"endColumn":85},{"ruleId":"144","severity":1,"message":"195","line":21,"column":14,"nodeType":"146","messageId":"147","endLine":21,"endColumn":36},{"ruleId":"144","severity":1,"message":"196","line":22,"column":16,"nodeType":"146","messageId":"147","endLine":22,"endColumn":40},{"ruleId":"191","severity":1,"message":"197","line":33,"column":5,"nodeType":"193","messageId":"194","endLine":33,"endColumn":24},{"ruleId":"144","severity":1,"message":"164","line":11,"column":25,"nodeType":"146","messageId":"147","endLine":11,"endColumn":32},{"ruleId":"144","severity":1,"message":"166","line":11,"column":34,"nodeType":"146","messageId":"147","endLine":11,"endColumn":43},{"ruleId":"191","severity":1,"message":"198","line":13,"column":41,"nodeType":"193","messageId":"194","endLine":13,"endColumn":45},"no-native-reassign",["199"],"no-negated-in-lhs",["200"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'FormStudent' is defined but never used.","'useCallback' is defined but never used.","'Controller' is defined but never used.","'useGetDataByPaing' is defined but never used.","'refetchStudent' is assigned a value but never used.","'isErrorStudent' is assigned a value but never used.","'page' is assigned a value but never used.","'setPage' is assigned a value but never used.","'isLoadingPanel' is assigned a value but never used.","'control' is assigned a value but never used.","'isSubmitSuccessful' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setValue'. Either include it or remove the dependency array.","ArrayExpression",["201"],"'isLoading' is assigned a value but never used.","'isError' is assigned a value but never used.","'error' is assigned a value but never used.","'isSuccess' is assigned a value but never used.","'onSaving' is assigned a value but never used.","'useEffect' is defined but never used.","'uuidv4' is defined but never used.","'Popup' is defined but never used.","'ToolbarItem' is defined but never used.","'useUpdateData' is defined but never used.","'studentDataSource' is assigned a value but never used.","'arrTemp' is assigned a value but never used.","'useForm' is defined but never used.","'setIsLoadingPanel' is assigned a value but never used.","'updateMutation' is assigned a value but never used.","'deleteMutation' is assigned a value but never used.","React Hook React.useCallback has a missing dependency: 'createMutation'. Either include it or remove the dependency array.",["202"],"'editRowKey' is assigned a value but never used.","'setEditRowKey' is assigned a value but never used.","'isRemove' is assigned a value but never used.","'setIsRemove' is assigned a value but never used.","'setDate' is assigned a value but never used.","'register' is assigned a value but never used.","'handleSubmit' is assigned a value but never used.","'setValue' is assigned a value but never used.","'errors' is assigned a value but never used.","'isSuccessStudent' is assigned a value but never used.","no-dupe-keys","Duplicate key 'dataStudent'.","ObjectExpression","unexpected","'isErrorStudentByPaging' is assigned a value but never used.","'isSuccessStudentByPaging' is assigned a value but never used.","Duplicate key 'dataStudentByPaging'.","Duplicate key 'data'.","no-global-assign","no-unsafe-negation",{"desc":"203","fix":"204"},{"desc":"205","fix":"206"},"Update the dependencies array to be: [checkPopup, setValue]",{"range":"207","text":"208"},"Update the dependencies array to be: [createMutation]",{"range":"209","text":"210"},[2410,2422],"[checkPopup, setValue]",[3671,3673],"[createMutation]"]