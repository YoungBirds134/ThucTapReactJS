{"ast":null,"code":"import React from 'react';\n\nvar getItem = function getItem(key) {\n  try {\n    var itemValue = localStorage.getItem(key);\n\n    if (typeof itemValue === 'string') {\n      return JSON.parse(itemValue);\n    }\n\n    return undefined;\n  } catch (_unused) {\n    return undefined;\n  }\n};\n\nexport default function useLocalStorage(key, defaultValue) {\n  var _React$useState = React.useState(),\n      value = _React$useState[0],\n      setValue = _React$useState[1];\n\n  React.useEffect(function () {\n    var initialValue = getItem(key);\n\n    if (typeof initialValue === 'undefined' || initialValue === null) {\n      setValue(typeof defaultValue === 'function' ? defaultValue() : defaultValue);\n    } else {\n      setValue(initialValue);\n    }\n  }, [defaultValue, key]);\n  var setter = React.useCallback(function (updater) {\n    setValue(function (old) {\n      var newVal = updater;\n\n      if (typeof updater == 'function') {\n        newVal = updater(old);\n      }\n\n      try {\n        localStorage.setItem(key, JSON.stringify(newVal));\n      } catch (_unused2) {}\n\n      return newVal;\n    });\n  }, [key]);\n  return [value, setter];\n}","map":{"version":3,"sources":["F:/ThucTapReactJS/my-app/node_modules/react-query/es/devtools/useLocalStorage.js"],"names":["React","getItem","key","itemValue","localStorage","JSON","parse","undefined","_unused","useLocalStorage","defaultValue","_React$useState","useState","value","setValue","useEffect","initialValue","setter","useCallback","updater","old","newVal","setItem","stringify","_unused2"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,IAAIC,OAAO,GAAG,SAASA,OAAT,CAAiBC,GAAjB,EAAsB;AAClC,MAAI;AACF,QAAIC,SAAS,GAAGC,YAAY,CAACH,OAAb,CAAqBC,GAArB,CAAhB;;AAEA,QAAI,OAAOC,SAAP,KAAqB,QAAzB,EAAmC;AACjC,aAAOE,IAAI,CAACC,KAAL,CAAWH,SAAX,CAAP;AACD;;AAED,WAAOI,SAAP;AACD,GARD,CAQE,OAAOC,OAAP,EAAgB;AAChB,WAAOD,SAAP;AACD;AACF,CAZD;;AAcA,eAAe,SAASE,eAAT,CAAyBP,GAAzB,EAA8BQ,YAA9B,EAA4C;AACzD,MAAIC,eAAe,GAAGX,KAAK,CAACY,QAAN,EAAtB;AAAA,MACIC,KAAK,GAAGF,eAAe,CAAC,CAAD,CAD3B;AAAA,MAEIG,QAAQ,GAAGH,eAAe,CAAC,CAAD,CAF9B;;AAIAX,EAAAA,KAAK,CAACe,SAAN,CAAgB,YAAY;AAC1B,QAAIC,YAAY,GAAGf,OAAO,CAACC,GAAD,CAA1B;;AAEA,QAAI,OAAOc,YAAP,KAAwB,WAAxB,IAAuCA,YAAY,KAAK,IAA5D,EAAkE;AAChEF,MAAAA,QAAQ,CAAC,OAAOJ,YAAP,KAAwB,UAAxB,GAAqCA,YAAY,EAAjD,GAAsDA,YAAvD,CAAR;AACD,KAFD,MAEO;AACLI,MAAAA,QAAQ,CAACE,YAAD,CAAR;AACD;AACF,GARD,EAQG,CAACN,YAAD,EAAeR,GAAf,CARH;AASA,MAAIe,MAAM,GAAGjB,KAAK,CAACkB,WAAN,CAAkB,UAAUC,OAAV,EAAmB;AAChDL,IAAAA,QAAQ,CAAC,UAAUM,GAAV,EAAe;AACtB,UAAIC,MAAM,GAAGF,OAAb;;AAEA,UAAI,OAAOA,OAAP,IAAkB,UAAtB,EAAkC;AAChCE,QAAAA,MAAM,GAAGF,OAAO,CAACC,GAAD,CAAhB;AACD;;AAED,UAAI;AACFhB,QAAAA,YAAY,CAACkB,OAAb,CAAqBpB,GAArB,EAA0BG,IAAI,CAACkB,SAAL,CAAeF,MAAf,CAA1B;AACD,OAFD,CAEE,OAAOG,QAAP,EAAiB,CAAE;;AAErB,aAAOH,MAAP;AACD,KAZO,CAAR;AAaD,GAdY,EAcV,CAACnB,GAAD,CAdU,CAAb;AAeA,SAAO,CAACW,KAAD,EAAQI,MAAR,CAAP;AACD","sourcesContent":["import React from 'react';\r\n\r\nvar getItem = function getItem(key) {\r\n  try {\r\n    var itemValue = localStorage.getItem(key);\r\n\r\n    if (typeof itemValue === 'string') {\r\n      return JSON.parse(itemValue);\r\n    }\r\n\r\n    return undefined;\r\n  } catch (_unused) {\r\n    return undefined;\r\n  }\r\n};\r\n\r\nexport default function useLocalStorage(key, defaultValue) {\r\n  var _React$useState = React.useState(),\r\n      value = _React$useState[0],\r\n      setValue = _React$useState[1];\r\n\r\n  React.useEffect(function () {\r\n    var initialValue = getItem(key);\r\n\r\n    if (typeof initialValue === 'undefined' || initialValue === null) {\r\n      setValue(typeof defaultValue === 'function' ? defaultValue() : defaultValue);\r\n    } else {\r\n      setValue(initialValue);\r\n    }\r\n  }, [defaultValue, key]);\r\n  var setter = React.useCallback(function (updater) {\r\n    setValue(function (old) {\r\n      var newVal = updater;\r\n\r\n      if (typeof updater == 'function') {\r\n        newVal = updater(old);\r\n      }\r\n\r\n      try {\r\n        localStorage.setItem(key, JSON.stringify(newVal));\r\n      } catch (_unused2) {}\r\n\r\n      return newVal;\r\n    });\r\n  }, [key]);\r\n  return [value, setter];\r\n}"]},"metadata":{},"sourceType":"module"}