{"ast":null,"code":"var _jsxFileName = \"/Users/nguyenthanhhuy/Documents/GitHub/ThucTapReactJS/my-app/src/components/CellStudent/index.js\",\n    _s = $RefreshSig$();\n\nimport \"devextreme/dist/css/dx.common.css\";\nimport \"devextreme/dist/css/dx.light.css\";\nimport React, { useEffect, useState, useRef, useCallback } from \"react\";\nimport ArrayStore from \"devextreme/data/array_store\";\nimport DataSource from \"devextreme/data/data_source\";\nimport \"./CellStudent.css\";\nimport DataGrid, { Column, Paging, Pager, Editing, Popup, Toolbar, Item, ToolbarItem } from \"devextreme-react/data-grid\";\nimport { TextField, Button } from \"@material-ui/core\";\nimport { useQuery } from \"react-query\";\nimport { fetchStudents } from \"../../services/fetchStudents.service\";\nimport { fetchStudentsKey } from \"../../util/queryKeys\";\nimport { toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport { useGetData } from './hooks/useGetData'; /////////\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\ntoast.configure();\n\nconst CellStudent = () => {\n  _s();\n\n  const {\n    isLoading,\n    isError,\n    isSuccess,\n    refetch,\n    remove,\n    data,\n    error\n  } = useQuery(fetchStudentsKey, fetchStudents); //State\n\n  const {} = useGetData;\n  const [changes, setChanges] = useState([]);\n  const [selectedRowKeys, setSelectedRowKeys] = useState([]); // Save params\n\n  const gridRef = useRef(null);\n  const studentDataSource = new DataSource({\n    store: new ArrayStore({\n      key: \"id\",\n      data: data // Other ArrayStore properties go here\n\n    }),\n    // Other DataSource properties go here\n    reshapeOnPush: true\n  });\n\n  const renderButton = cell => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"flex\",\n        justifyContent: \"space-between\"\n      },\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        onClick: () => {\n          var _gridRef$current, _gridRef$current$inst;\n\n          (_gridRef$current = gridRef.current) === null || _gridRef$current === void 0 ? void 0 : (_gridRef$current$inst = _gridRef$current.instance) === null || _gridRef$current$inst === void 0 ? void 0 : _gridRef$current$inst.deleteRow(cell.rowIndex);\n        },\n        children: \"remove\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this);\n  };\n\n  const onChangesChange = React.useCallback(changes => {\n    setChanges(changes);\n  }, []);\n\n  const onCellClick = e => {\n    var _gridRef$current2;\n\n    if ((_gridRef$current2 = gridRef.current) === null || _gridRef$current2 === void 0 ? void 0 : _gridRef$current2.instance.getVisibleColumnIndex(e.columnIndex)) {\n      var _gridRef$current3, _gridRef$current3$ins;\n\n      (_gridRef$current3 = gridRef.current) === null || _gridRef$current3 === void 0 ? void 0 : (_gridRef$current3$ins = _gridRef$current3.instance) === null || _gridRef$current3$ins === void 0 ? void 0 : _gridRef$current3$ins.editCell(e.rowIndex, e.columnIndex);\n      console.log(\"Cell is now visible\");\n    } else {\n      console.log(\"Cell not visible\");\n    }\n  };\n\n  const editingStart = e => {\n    debugger; // gridRef.current?.instance?.saveEditData();\n  };\n\n  const selectionChanged = data => {\n    setSelectedRowKeys(data.selectedRowKeys);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main__title\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Manage Data Student\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main__Add\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main__body\",\n      children: /*#__PURE__*/_jsxDEV(DataGrid, {\n        dataSource: studentDataSource,\n        remoteOperations: true,\n        ref: gridRef,\n        repaintChangesOnly: true,\n        onCellClick: onCellClick,\n        editingStart: editingStart,\n        selectedRowKeys: selectedRowKeys,\n        onSelectionChanged: selectionChanged,\n        children: [/*#__PURE__*/_jsxDEV(Editing, {\n          mode: \"cell\",\n          useIcons: true,\n          changes: changes,\n          onChangesChange: onChangesChange // editRowKey={editRowKey}\n          // onEditRowKeyChange={onEditRowKeyChange}\n          ,\n          startEditAction: true,\n          selectTextOnEditStart: true,\n          children: /*#__PURE__*/_jsxDEV(TextField, {\n            label: \"Student\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Column, {\n          dataField: \"nameStudent\",\n          dataType: \"string\",\n          showEditorAlways: false\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Column, {\n          dataField: \"phoneStudent\",\n          dataType: \"string\",\n          showEditorAlways: false\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Column, {\n          dataField: \"dateOfBirth\",\n          dataType: \"date\",\n          format: \"dd/MM/yyyy\",\n          showEditorAlways: false\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Column, {\n          dataField: \"createDate\",\n          dataType: \"date\",\n          visible: false,\n          defaultSortOrder: \"asc\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Column, {\n          dataField: \"scoreStudent\",\n          dataType: \"number\",\n          showEditorAlways: false\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Column, {\n          dataField: \"\",\n          cellRender: renderButton\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Toolbar, {\n          children: [/*#__PURE__*/_jsxDEV(Item, {\n            location: \"after\",\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"contained\",\n              icon: \"refresh\",\n              onClick: () => {\n                refetch();\n                toast(\"ðŸ¦„ You are refetched\", {\n                  position: \"top-right\",\n                  autoClose: 5000,\n                  hideProgressBar: false,\n                  closeOnClick: true,\n                  pauseOnHover: true,\n                  draggable: true,\n                  progress: undefined\n                });\n              },\n              children: \"refetch\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 150,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Item, {\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"contained\",\n              onClick: () => {\n                var _gridRef$current4, _gridRef$current4$ins;\n\n                return (_gridRef$current4 = gridRef.current) === null || _gridRef$current4 === void 0 ? void 0 : (_gridRef$current4$ins = _gridRef$current4.instance) === null || _gridRef$current4$ins === void 0 ? void 0 : _gridRef$current4$ins.addRow();\n              },\n              children: \"add\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 180,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 179,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Paging, {\n          defaultPageSize: 12\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Pager, {\n          showPageSizeSelector: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n}; //Create content customize Form\n\n\n_s(CellStudent, \"XvaP5Kssg/Mm2WoNFj3Bc4QzA5E=\", false, function () {\n  return [useQuery];\n});\n\n_c = CellStudent;\nexport default CellStudent;\n\nvar _c;\n\n$RefreshReg$(_c, \"CellStudent\");","map":{"version":3,"sources":["/Users/nguyenthanhhuy/Documents/GitHub/ThucTapReactJS/my-app/src/components/CellStudent/index.js"],"names":["React","useEffect","useState","useRef","useCallback","ArrayStore","DataSource","DataGrid","Column","Paging","Pager","Editing","Popup","Toolbar","Item","ToolbarItem","TextField","Button","useQuery","fetchStudents","fetchStudentsKey","toast","useGetData","configure","CellStudent","isLoading","isError","isSuccess","refetch","remove","data","error","changes","setChanges","selectedRowKeys","setSelectedRowKeys","gridRef","studentDataSource","store","key","reshapeOnPush","renderButton","cell","display","justifyContent","current","instance","deleteRow","rowIndex","onChangesChange","onCellClick","e","getVisibleColumnIndex","columnIndex","editCell","console","log","editingStart","selectionChanged","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","addRow"],"mappings":"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","sourcesContent":["import \"devextreme/dist/css/dx.common.css\";\nimport \"devextreme/dist/css/dx.light.css\";\nimport React, { useEffect, useState, useRef, useCallback } from \"react\";\nimport ArrayStore from \"devextreme/data/array_store\";\nimport DataSource from \"devextreme/data/data_source\";\nimport \"./CellStudent.css\";\nimport DataGrid, {\n  Column,\n  Paging,\n  Pager,\n  Editing,\n  Popup,\n  Toolbar,\n  Item,\n  ToolbarItem,\n} from \"devextreme-react/data-grid\";\nimport { TextField, Button } from \"@material-ui/core\";\n\nimport { useQuery } from \"react-query\";\nimport { fetchStudents } from \"../../services/fetchStudents.service\";\nimport { fetchStudentsKey } from \"../../util/queryKeys\";\nimport { toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport{useGetData} from './hooks/useGetData';\n\n\n/////////\ntoast.configure();\n\nconst CellStudent = () => {\n  const  { isLoading, isError, isSuccess, refetch, remove, data, error } =\n    useQuery(fetchStudentsKey, fetchStudents);\n  //State\n  const {}=useGetData\n  const [changes, setChanges] = useState([]);\n  const [selectedRowKeys, setSelectedRowKeys] = useState([]);\n  // Save params\n  const gridRef = useRef(null);\n  const studentDataSource = new DataSource({\n    store: new ArrayStore({\n      key: \"id\",\n      data: data,\n\n      // Other ArrayStore properties go here\n    }),\n    // Other DataSource properties go here\n\n    reshapeOnPush: true,\n  });\n\n  const renderButton = (cell) => {\n    return (\n      <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\n        <Button\n          variant=\"contained\"\n          onClick={() => {\n            gridRef.current?.instance?.deleteRow(cell.rowIndex);\n          }}\n        >\n          remove\n        </Button>\n      </div>\n    );\n  };\n\n  const onChangesChange = React.useCallback((changes) => {\n    setChanges(changes);\n  }, []);\n\n  const onCellClick = (e) => {\n    if (gridRef.current?.instance.getVisibleColumnIndex(e.columnIndex)) {\n      gridRef.current?.instance?.editCell(e.rowIndex, e.columnIndex);\n      console.log(\"Cell is now visible\");\n    } else {\n      console.log(\"Cell not visible\");\n    }\n  };\n  const editingStart = (e) => {\n    debugger;\n  \n    // gridRef.current?.instance?.saveEditData();\n  };\n  const selectionChanged = (data) => {\n    setSelectedRowKeys(data.selectedRowKeys);\n  };\n  return (\n    <div>\n      <div className=\"main__title\">\n        <h1>Manage Data Student</h1>\n      </div>\n\n      <div className=\"main__Add\"></div>\n      <div className=\"main__body\">\n        <DataGrid\n          dataSource={studentDataSource}\n          remoteOperations={true}\n          ref={gridRef}\n          repaintChangesOnly={true}\n          onCellClick={onCellClick}\n          editingStart={editingStart}\n          selectedRowKeys={selectedRowKeys}\n          onSelectionChanged={selectionChanged}\n        >\n          <Editing\n            mode=\"cell\"\n            useIcons={true}\n            changes={changes}\n            onChangesChange={onChangesChange}\n            // editRowKey={editRowKey}\n            // onEditRowKeyChange={onEditRowKeyChange}\n\n            startEditAction\n            selectTextOnEditStart={true}\n          >\n            <TextField label=\"Student\"></TextField>\n          </Editing>\n\n          <Column\n            dataField=\"nameStudent\"\n            dataType=\"string\"\n            showEditorAlways={false}\n          />\n          <Column\n            dataField=\"phoneStudent\"\n            dataType=\"string\"\n            showEditorAlways={false}\n          />\n          <Column\n            dataField=\"dateOfBirth\"\n            dataType=\"date\"\n            format=\"dd/MM/yyyy\"\n            showEditorAlways={false}\n          />\n          <Column\n            dataField=\"createDate\"\n            dataType=\"date\"\n            visible={false}\n            defaultSortOrder=\"asc\"\n          />\n\n          <Column\n            dataField=\"scoreStudent\"\n            dataType=\"number\"\n            showEditorAlways={false}\n          />\n          <Column dataField=\"\" cellRender={renderButton}></Column>\n\n          <Toolbar>\n            <Item location=\"after\">\n              <Button\n                variant=\"contained\"\n                icon=\"refresh\"\n                onClick={() => {\n                  refetch();\n                  toast(\"ðŸ¦„ You are refetched\", {\n                    position: \"top-right\",\n                    autoClose: 5000,\n                    hideProgressBar: false,\n                    closeOnClick: true,\n                    pauseOnHover: true,\n                    draggable: true,\n                    progress: undefined,\n                  });\n                }}\n              >\n                refetch\n              </Button>\n            </Item>\n            {/* <Item location=\"after\">\n              <Button\n                variant=\"contained\"\n                icon=\"refresh\"\n                onClick={() => gridRef.current?.instance?.saveEditData()}\n                viable={false}\n              >\n                Save\n              </Button>\n            </Item> */}\n            <Item>\n              <Button\n                variant=\"contained\"\n                onClick={() => gridRef.current?.instance?.addRow()}\n              >\n                add\n              </Button>\n            </Item>\n          </Toolbar>\n          <Paging defaultPageSize={12} />\n          <Pager showPageSizeSelector={true} />\n        </DataGrid>\n      </div>\n\n      {/* ///React Hook Form + Material Setup */}\n    </div>\n  );\n};\n//Create content customize Form\n\nexport default CellStudent;\n"]},"metadata":{},"sourceType":"module"}