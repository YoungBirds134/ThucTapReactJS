{"ast":null,"code":"var _jsxFileName = \"/Users/nguyenthanhhuy/Documents/GitHub/ThucTapReactJS/my-app/src/components/BatchStudent/index.js\",\n    _s = $RefreshSig$();\n\nimport \"devextreme/dist/css/dx.common.css\";\nimport \"devextreme/dist/css/dx.light.css\";\nimport React, { useEffect, useState, useRef, useCallback } from \"react\";\nimport ArrayStore from \"devextreme/data/array_store\";\nimport DataSource from \"devextreme/data/data_source\";\nimport \"./BatchStudent.css\";\nimport DataGrid, { Column, Paging, Pager, Editing, Popup, Toolbar, Item, ToolbarItem } from \"devextreme-react/data-grid\";\nimport { TextField, Button } from \"@material-ui/core\";\nimport { useForm, Controller } from \"react-hook-form\"; // Toast\n\nimport { toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport useGetData from \"./../PopUpStudent/hooks/useGetData\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst allowedPageSizes = [5, 10, \"all\"]; /////////\n\ntoast.configure();\n\nconst BatchStudent = () => {\n  _s();\n\n  const {\n    refetchStudent,\n    dataStudent,\n    isErrorStudent,\n    isLoadingStudent\n  } = useGetData();\n  const studentDataSource = new DataSource({\n    store: new ArrayStore({\n      key: \"id\",\n      data: dataStudent // Other ArrayStore properties go here\n\n    }),\n    // Other DataSource properties go here\n    reshapeOnPush: true\n  }); //State\n\n  const [changes, setChanges] = useState([]);\n  const [editRowKey, setEditRowKey] = useState(null); // Save params\n\n  const gridRef = useRef(null);\n\n  const renderButton = cell => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"flex\",\n        justifyContent: \"space-between\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        onClick: () => {\n          var _gridRef$current, _gridRef$current$inst;\n\n          (_gridRef$current = gridRef.current) === null || _gridRef$current === void 0 ? void 0 : (_gridRef$current$inst = _gridRef$current.instance) === null || _gridRef$current$inst === void 0 ? void 0 : _gridRef$current$inst.deleteRow(cell.rowIndex);\n        },\n        children: \"remove\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\" // disabled={isAddButtonVisible}\n        ,\n        onClick: () => {\n          var _gridRef$current2, _gridRef$current2$ins;\n\n          (_gridRef$current2 = gridRef.current) === null || _gridRef$current2 === void 0 ? void 0 : (_gridRef$current2$ins = _gridRef$current2.instance) === null || _gridRef$current2$ins === void 0 ? void 0 : _gridRef$current2$ins.undeleteRow(cell.rowIndex);\n        },\n        children: \"unremove\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this);\n  };\n\n  const onChangesChange = React.useCallback(changes => {\n    d;\n    console.log(\"changes: \" + changes + \"\\n\" + changes.type);\n    setChanges(changes);\n  }, []);\n\n  const onCellClick = e => {\n    var _gridRef$current3, _gridRef$current3$ins;\n\n    (_gridRef$current3 = gridRef.current) === null || _gridRef$current3 === void 0 ? void 0 : (_gridRef$current3$ins = _gridRef$current3.instance) === null || _gridRef$current3$ins === void 0 ? void 0 : _gridRef$current3$ins.editCell(e.rowIndex, e.columnIndex);\n  }; // Note usually that Create Field default when add row\n\n\n  const onInitRow = e => {\n    e.data.createDate = new Date(); // e.data.id = Math.ceil(Math.random() * (10000 - 100) + 100);\n  };\n\n  const onEditRowKeyChange = React.useCallback(editRowKey => {\n    console.log(editRowKey);\n    setEditRowKey(editRowKey);\n  }, []);\n  return isLoadingStudent ? /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, this) : isErrorStudent ? /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"An error while fetching posts\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main__title\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Manage Data Student\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main__Add\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main__body\",\n      children: /*#__PURE__*/_jsxDEV(DataGrid // keyExpr=\"id\"\n      , {\n        showBorders: true,\n        dataSource: dataStudent,\n        remoteOperations: true,\n        ref: gridRef,\n        repaintChangesOnly: true,\n        onCellClick: onCellClick,\n        onInitNewRow: onInitRow,\n        children: [/*#__PURE__*/_jsxDEV(Paging, {\n          defaultPageSize: 5\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Pager, {\n          visible: true,\n          allowedPageSizes: allowedPageSizes,\n          displayMode: \"compact\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Editing, {\n          mode: \"batch\",\n          useIcons: true,\n          changes: changes,\n          onChangesChange: onChangesChange,\n          editRowKey: editRowKey,\n          onEditRowKeyChange: onEditRowKeyChange,\n          children: /*#__PURE__*/_jsxDEV(TextField, {\n            label: \"Student\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Column, {\n          dataField: \"id\",\n          allowEditing: false\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Column, {\n          dataField: \"nameStudent\",\n          dataType: \"string\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Column, {\n          dataField: \"phoneStudent\",\n          dataType: \"string\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Column, {\n          dataField: \"dateOfBirth\",\n          dataType: \"date\",\n          format: \"dd/MM/yyyy\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Column, {\n          dataField: \"createDate\",\n          dataType: \"date\",\n          visible: false,\n          defaultSortOrder: \"asc\" // value={date}\n\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Column, {\n          dataField: \"scoreStudent\",\n          dataType: \"number\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Column, {\n          dataField: \"\",\n          cellRender: renderButton\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Toolbar, {\n          children: [/*#__PURE__*/_jsxDEV(Item, {\n            location: \"after\",\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"contained\",\n              icon: \"refresh\",\n              onClick: () => refetchStudent(),\n              children: \"Refetch\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 153,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Item, {\n            location: \"after\",\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"contained\",\n              icon: \"refresh\",\n              onClick: () => {\n                var _gridRef$current4, _gridRef$current4$ins;\n\n                return (_gridRef$current4 = gridRef.current) === null || _gridRef$current4 === void 0 ? void 0 : (_gridRef$current4$ins = _gridRef$current4.instance) === null || _gridRef$current4$ins === void 0 ? void 0 : _gridRef$current4$ins.cancelEditData();\n              },\n              children: \"Discard\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 162,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Item, {\n            location: \"after\",\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"contained\",\n              icon: \"refresh\",\n              onClick: () => {\n                var _gridRef$current5, _gridRef$current5$ins;\n\n                return (_gridRef$current5 = gridRef.current) === null || _gridRef$current5 === void 0 ? void 0 : (_gridRef$current5$ins = _gridRef$current5.instance) === null || _gridRef$current5$ins === void 0 ? void 0 : _gridRef$current5$ins.saveEditData();\n              },\n              viable: false,\n              children: \"Save\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 171,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Item, {\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"contained\",\n              onClick: () => {\n                var _gridRef$current6, _gridRef$current6$ins;\n\n                return (_gridRef$current6 = gridRef.current) === null || _gridRef$current6 === void 0 ? void 0 : (_gridRef$current6$ins = _gridRef$current6.instance) === null || _gridRef$current6$ins === void 0 ? void 0 : _gridRef$current6$ins.addRow();\n              },\n              children: \"add\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 181,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 180,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 5\n  }, this);\n}; //Create content customize Form\n\n\n_s(BatchStudent, \"KpIAqgrszBh5dTd5wJmTz31D744=\", false, function () {\n  return [useGetData];\n});\n\n_c = BatchStudent;\nexport default BatchStudent;\n\nvar _c;\n\n$RefreshReg$(_c, \"BatchStudent\");","map":{"version":3,"sources":["/Users/nguyenthanhhuy/Documents/GitHub/ThucTapReactJS/my-app/src/components/BatchStudent/index.js"],"names":["React","useEffect","useState","useRef","useCallback","ArrayStore","DataSource","DataGrid","Column","Paging","Pager","Editing","Popup","Toolbar","Item","ToolbarItem","TextField","Button","useForm","Controller","toast","useGetData","allowedPageSizes","configure","BatchStudent","refetchStudent","dataStudent","isErrorStudent","isLoadingStudent","studentDataSource","store","key","data","reshapeOnPush","changes","setChanges","editRowKey","setEditRowKey","gridRef","renderButton","cell","display","justifyContent","current","instance","deleteRow","rowIndex","undeleteRow","onChangesChange","d","console","log","type","onCellClick","e","editCell","columnIndex","onInitRow","createDate","Date","onEditRowKeyChange","cancelEditData","saveEditData","addRow"],"mappings":";;;AAAA,OAAO,mCAAP;AACA,OAAO,kCAAP;AACA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,MAArC,EAA6CC,WAA7C,QAAgE,OAAhE;AACA,OAAOC,UAAP,MAAuB,6BAAvB;AACA,OAAOC,UAAP,MAAuB,6BAAvB;AACA,OAAO,oBAAP;AACA,OAAOC,QAAP,IACEC,MADF,EAEEC,MAFF,EAGEC,KAHF,EAIEC,OAJF,EAKEC,KALF,EAMEC,OANF,EAOEC,IAPF,EAQEC,WARF,QASO,4BATP;AAUA,SAASC,SAAT,EAAoBC,MAApB,QAAkC,mBAAlC;AAEA,SAASC,OAAT,EAAkBC,UAAlB,QAAoC,iBAApC,C,CAEA;;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,OAAO,uCAAP;AACA,OAAOC,UAAP,MAAuB,oCAAvB;;AAEA,MAAMC,gBAAgB,GAAG,CAAC,CAAD,EAAI,EAAJ,EAAQ,KAAR,CAAzB,C,CAEA;;AACAF,KAAK,CAACG,SAAN;;AACA,MAAMC,YAAY,GAAG,MAAM;AAAA;;AACzB,QAAM;AACJC,IAAAA,cADI;AAGJC,IAAAA,WAHI;AAIJC,IAAAA,cAJI;AAKJC,IAAAA;AALI,MAMFP,UAAU,EANd;AAOA,QAAMQ,iBAAiB,GAAG,IAAIvB,UAAJ,CAAe;AACvCwB,IAAAA,KAAK,EAAE,IAAIzB,UAAJ,CAAe;AACpB0B,MAAAA,GAAG,EAAE,IADe;AAEpBC,MAAAA,IAAI,EAAEN,WAFc,CAIpB;;AAJoB,KAAf,CADgC;AAOvC;AAEAO,IAAAA,aAAa,EAAE;AATwB,GAAf,CAA1B,CARyB,CAmBzB;;AACA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBjC,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACkC,UAAD,EAAaC,aAAb,IAA8BnC,QAAQ,CAAC,IAAD,CAA5C,CArByB,CAuBzB;;AACA,QAAMoC,OAAO,GAAGnC,MAAM,CAAC,IAAD,CAAtB;;AAEA,QAAMoC,YAAY,GAAIC,IAAD,IAAU;AAC7B,wBACE;AAAK,MAAA,KAAK,EAAE;AAAEC,QAAAA,OAAO,EAAE,MAAX;AAAmBC,QAAAA,cAAc,EAAE;AAAnC,OAAZ;AAAA,8BACE,QAAC,MAAD;AACE,QAAA,OAAO,EAAC,WADV;AAEE,QAAA,OAAO,EAAE,MAAM;AAAA;;AACb,8BAAAJ,OAAO,CAACK,OAAR,+FAAiBC,QAAjB,gFAA2BC,SAA3B,CAAqCL,IAAI,CAACM,QAA1C;AACD,SAJH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eASE,QAAC,MAAD;AACE,QAAA,OAAO,EAAC,WADV,CAEE;AAFF;AAGE,QAAA,OAAO,EAAE,MAAM;AAAA;;AACb,+BAAAR,OAAO,CAACK,OAAR,iGAAiBC,QAAjB,gFAA2BG,WAA3B,CAAuCP,IAAI,CAACM,QAA5C;AACD,SALH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cATF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAqBD,GAtBD;;AAwBA,QAAME,eAAe,GAAGhD,KAAK,CAACI,WAAN,CAAmB8B,OAAD,IAAa;AACrDe,IAAAA,CAAC;AACDC,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAcjB,OAAd,GAAwB,IAAxB,GAA+BA,OAAO,CAACkB,IAAnD;AACAjB,IAAAA,UAAU,CAACD,OAAD,CAAV;AACD,GAJuB,EAIrB,EAJqB,CAAxB;;AAKA,QAAMmB,WAAW,GAAIC,CAAD,IAAO;AAAA;;AACzB,yBAAAhB,OAAO,CAACK,OAAR,iGAAiBC,QAAjB,gFAA2BW,QAA3B,CAAoCD,CAAC,CAACR,QAAtC,EAAgDQ,CAAC,CAACE,WAAlD;AACD,GAFD,CAvDyB,CA2DzB;;;AACA,QAAMC,SAAS,GAAIH,CAAD,IAAO;AACvBA,IAAAA,CAAC,CAACtB,IAAF,CAAO0B,UAAP,GAAoB,IAAIC,IAAJ,EAApB,CADuB,CAEvB;AACD,GAHD;;AAIA,QAAMC,kBAAkB,GAAG5D,KAAK,CAACI,WAAN,CAAmBgC,UAAD,IAAgB;AAC3Dc,IAAAA,OAAO,CAACC,GAAR,CAAYf,UAAZ;AACAC,IAAAA,aAAa,CAACD,UAAD,CAAb;AACD,GAH0B,EAGxB,EAHwB,CAA3B;AAIA,SAAOR,gBAAgB,gBACrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADqB,GAEnBD,cAAc,gBAChB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADgB,gBAGhB;AAAA,4BACE;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA,6BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF,eAKE;AAAK,MAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,YALF,eAME;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA,6BACE,QAAC,QAAD,CACE;AADF;AAEE,QAAA,WAAW,MAFb;AAGE,QAAA,UAAU,EAAED,WAHd;AAIE,QAAA,gBAAgB,EAAE,IAJpB;AAKE,QAAA,GAAG,EAAEY,OALP;AAME,QAAA,kBAAkB,EAAE,IANtB;AAOE,QAAA,WAAW,EAAEe,WAPf;AAQE,QAAA,YAAY,EAAEI,SARhB;AAAA,gCAUE,QAAC,MAAD;AAAQ,UAAA,eAAe,EAAE;AAAzB;AAAA;AAAA;AAAA;AAAA,gBAVF,eAWE,QAAC,KAAD;AACE,UAAA,OAAO,EAAE,IADX;AAEE,UAAA,gBAAgB,EAAEnC,gBAFpB;AAGE,UAAA,WAAW,EAAC;AAHd;AAAA;AAAA;AAAA;AAAA,gBAXF,eAgBE,QAAC,OAAD;AACE,UAAA,IAAI,EAAC,OADP;AAEE,UAAA,QAAQ,EAAE,IAFZ;AAGE,UAAA,OAAO,EAAEY,OAHX;AAIE,UAAA,eAAe,EAAEc,eAJnB;AAKE,UAAA,UAAU,EAAEZ,UALd;AAME,UAAA,kBAAkB,EAAEwB,kBANtB;AAAA,iCAQE,QAAC,SAAD;AAAW,YAAA,KAAK,EAAC;AAAjB;AAAA;AAAA;AAAA;AAAA;AARF;AAAA;AAAA;AAAA;AAAA,gBAhBF,eA0BE,QAAC,MAAD;AAAQ,UAAA,SAAS,EAAC,IAAlB;AAAuB,UAAA,YAAY,EAAE;AAArC;AAAA;AAAA;AAAA;AAAA,gBA1BF,eA2BE,QAAC,MAAD;AAAQ,UAAA,SAAS,EAAC,aAAlB;AAAgC,UAAA,QAAQ,EAAC;AAAzC;AAAA;AAAA;AAAA;AAAA,gBA3BF,eA4BE,QAAC,MAAD;AAAQ,UAAA,SAAS,EAAC,cAAlB;AAAiC,UAAA,QAAQ,EAAC;AAA1C;AAAA;AAAA;AAAA;AAAA,gBA5BF,eA6BE,QAAC,MAAD;AAAQ,UAAA,SAAS,EAAC,aAAlB;AAAgC,UAAA,QAAQ,EAAC,MAAzC;AAAgD,UAAA,MAAM,EAAC;AAAvD;AAAA;AAAA;AAAA;AAAA,gBA7BF,eA8BE,QAAC,MAAD;AACE,UAAA,SAAS,EAAC,YADZ;AAEE,UAAA,QAAQ,EAAC,MAFX;AAGE,UAAA,OAAO,EAAE,KAHX;AAIE,UAAA,gBAAgB,EAAC,KAJnB,CAKE;;AALF;AAAA;AAAA;AAAA;AAAA,gBA9BF,eAsCE,QAAC,MAAD;AAAQ,UAAA,SAAS,EAAC,cAAlB;AAAiC,UAAA,QAAQ,EAAC;AAA1C;AAAA;AAAA;AAAA;AAAA,gBAtCF,eAuCE,QAAC,MAAD;AAAQ,UAAA,SAAS,EAAC,EAAlB;AAAqB,UAAA,UAAU,EAAErB;AAAjC;AAAA;AAAA;AAAA;AAAA,gBAvCF,eAyCE,QAAC,OAAD;AAAA,kCACE,QAAC,IAAD;AAAM,YAAA,QAAQ,EAAC,OAAf;AAAA,mCACE,QAAC,MAAD;AACE,cAAA,OAAO,EAAC,WADV;AAEE,cAAA,IAAI,EAAC,SAFP;AAGE,cAAA,OAAO,EAAE,MAAMd,cAAc,EAH/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,kBADF,eAUE,QAAC,IAAD;AAAM,YAAA,QAAQ,EAAC,OAAf;AAAA,mCACE,QAAC,MAAD;AACE,cAAA,OAAO,EAAC,WADV;AAEE,cAAA,IAAI,EAAC,SAFP;AAGE,cAAA,OAAO,EAAE;AAAA;;AAAA,4CAAMa,OAAO,CAACK,OAAd,+EAAM,kBAAiBC,QAAvB,0DAAM,sBAA2BiB,cAA3B,EAAN;AAAA,eAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,kBAVF,eAmBE,QAAC,IAAD;AAAM,YAAA,QAAQ,EAAC,OAAf;AAAA,mCACE,QAAC,MAAD;AACE,cAAA,OAAO,EAAC,WADV;AAEE,cAAA,IAAI,EAAC,SAFP;AAGE,cAAA,OAAO,EAAE;AAAA;;AAAA,4CAAMvB,OAAO,CAACK,OAAd,+EAAM,kBAAiBC,QAAvB,0DAAM,sBAA2BkB,YAA3B,EAAN;AAAA,eAHX;AAIE,cAAA,MAAM,EAAE,KAJV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,kBAnBF,eA6BE,QAAC,IAAD;AAAA,mCACE,QAAC,MAAD;AACE,cAAA,OAAO,EAAC,WADV;AAEE,cAAA,OAAO,EAAE;AAAA;;AAAA,4CAAMxB,OAAO,CAACK,OAAd,+EAAM,kBAAiBC,QAAvB,0DAAM,sBAA2BmB,MAA3B,EAAN;AAAA,eAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,kBA7BF;AAAA;AAAA;AAAA;AAAA;AAAA,gBAzCF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YANF;AAAA;AAAA;AAAA;AAAA;AAAA,UALF;AAiGD,CArKD,C,CAsKA;;;GAtKMvC,Y;UAOAH,U;;;KAPAG,Y;AAwKN,eAAeA,YAAf","sourcesContent":["import \"devextreme/dist/css/dx.common.css\";\nimport \"devextreme/dist/css/dx.light.css\";\nimport React, { useEffect, useState, useRef, useCallback } from \"react\";\nimport ArrayStore from \"devextreme/data/array_store\";\nimport DataSource from \"devextreme/data/data_source\";\nimport \"./BatchStudent.css\";\nimport DataGrid, {\n  Column,\n  Paging,\n  Pager,\n  Editing,\n  Popup,\n  Toolbar,\n  Item,\n  ToolbarItem,\n} from \"devextreme-react/data-grid\";\nimport { TextField, Button } from \"@material-ui/core\";\n\nimport { useForm, Controller } from \"react-hook-form\";\n\n// Toast\nimport { toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport useGetData from \"./../PopUpStudent/hooks/useGetData\";\n\nconst allowedPageSizes = [5, 10, \"all\"];\n\n/////////\ntoast.configure();\nconst BatchStudent = () => {\n  const {\n    refetchStudent,\n\n    dataStudent,\n    isErrorStudent,\n    isLoadingStudent,\n  } = useGetData();\n  const studentDataSource = new DataSource({\n    store: new ArrayStore({\n      key: \"id\",\n      data: dataStudent,\n\n      // Other ArrayStore properties go here\n    }),\n    // Other DataSource properties go here\n\n    reshapeOnPush: true,\n  });\n  //State\n  const [changes, setChanges] = useState([]);\n  const [editRowKey, setEditRowKey] = useState(null);\n\n  // Save params\n  const gridRef = useRef(null);\n\n  const renderButton = (cell) => {\n    return (\n      <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\n        <Button\n          variant=\"contained\"\n          onClick={() => {\n            gridRef.current?.instance?.deleteRow(cell.rowIndex);\n          }}\n        >\n          remove\n        </Button>\n        <Button\n          variant=\"contained\"\n          // disabled={isAddButtonVisible}\n          onClick={() => {\n            gridRef.current?.instance?.undeleteRow(cell.rowIndex);\n          }}\n        >\n          unremove\n        </Button>\n      </div>\n    );\n  };\n\n  const onChangesChange = React.useCallback((changes) => {\n    d\n    console.log(\"changes: \" + changes + \"\\n\" + changes.type);\n    setChanges(changes);\n  }, []);\n  const onCellClick = (e) => {\n    gridRef.current?.instance?.editCell(e.rowIndex, e.columnIndex);\n  };\n\n  // Note usually that Create Field default when add row\n  const onInitRow = (e) => {\n    e.data.createDate = new Date();\n    // e.data.id = Math.ceil(Math.random() * (10000 - 100) + 100);\n  };\n  const onEditRowKeyChange = React.useCallback((editRowKey) => {\n    console.log(editRowKey);\n    setEditRowKey(editRowKey);\n  }, []);\n  return isLoadingStudent ? (\n    <div>Loading...</div>\n  ) : isErrorStudent ? (\n    <div>An error while fetching posts</div>\n  ) : (\n    <div>\n      <div className=\"main__title\">\n        <h1>Manage Data Student</h1>\n      </div>\n\n      <div className=\"main__Add\"></div>\n      <div className=\"main__body\">\n        <DataGrid\n          // keyExpr=\"id\"\n          showBorders\n          dataSource={dataStudent}\n          remoteOperations={true}\n          ref={gridRef}\n          repaintChangesOnly={true}\n          onCellClick={onCellClick}\n          onInitNewRow={onInitRow}\n        >\n          <Paging defaultPageSize={5} />\n          <Pager\n            visible={true}\n            allowedPageSizes={allowedPageSizes}\n            displayMode=\"compact\"\n          />\n          <Editing\n            mode=\"batch\"\n            useIcons={true}\n            changes={changes}\n            onChangesChange={onChangesChange}\n            editRowKey={editRowKey}\n            onEditRowKeyChange={onEditRowKeyChange}\n          >\n            <TextField label=\"Student\"></TextField>\n          </Editing>\n          <Column dataField=\"id\" allowEditing={false} />\n          <Column dataField=\"nameStudent\" dataType=\"string\" />\n          <Column dataField=\"phoneStudent\" dataType=\"string\" />\n          <Column dataField=\"dateOfBirth\" dataType=\"date\" format=\"dd/MM/yyyy\" />\n          <Column\n            dataField=\"createDate\"\n            dataType=\"date\"\n            visible={false}\n            defaultSortOrder=\"asc\"\n            // value={date}\n          />\n\n          <Column dataField=\"scoreStudent\" dataType=\"number\" />\n          <Column dataField=\"\" cellRender={renderButton}></Column>\n\n          <Toolbar>\n            <Item location=\"after\">\n              <Button\n                variant=\"contained\"\n                icon=\"refresh\"\n                onClick={() => refetchStudent()}\n              >\n                Refetch\n              </Button>\n            </Item>\n            <Item location=\"after\">\n              <Button\n                variant=\"contained\"\n                icon=\"refresh\"\n                onClick={() => gridRef.current?.instance?.cancelEditData()}\n              >\n                Discard\n              </Button>\n            </Item>\n            <Item location=\"after\">\n              <Button\n                variant=\"contained\"\n                icon=\"refresh\"\n                onClick={() => gridRef.current?.instance?.saveEditData()}\n                viable={false}\n              >\n                Save\n              </Button>\n            </Item>\n            <Item>\n              <Button\n                variant=\"contained\"\n                onClick={() => gridRef.current?.instance?.addRow()}\n              >\n                add\n              </Button>\n            </Item>\n          </Toolbar>\n        </DataGrid>\n      </div>\n\n      {/* ///React Hook Form + Material Setup */}\n    </div>\n  );\n};\n//Create content customize Form\n\nexport default BatchStudent;\n"]},"metadata":{},"sourceType":"module"}