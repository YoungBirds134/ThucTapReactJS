{"ast":null,"code":"var _jsxFileName = \"/Users/nguyenthanhhuy/Documents/GitHub/ThucTapReactJS/my-app/src/components/BatchStudent/index.js\",\n    _s = $RefreshSig$();\n\nimport \"devextreme/dist/css/dx.common.css\";\nimport \"devextreme/dist/css/dx.light.css\";\nimport React, { useEffect, useState, useRef, useCallback } from \"react\";\nimport ArrayStore from \"devextreme/data/array_store\";\nimport DataSource from \"devextreme/data/data_source\";\nimport \"./BatchStudent.css\";\nimport DataGrid, { Column, Paging, Pager, Editing, Popup, Toolbar, Item, ToolbarItem } from \"devextreme-react/data-grid\";\nimport { TextField, Button } from \"@material-ui/core\";\nimport { useForm, Controller } from \"react-hook-form\"; // Toast\n\nimport { toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport useGetData from \"./hooks/useGetData\";\nimport useGetDataByPaing from \"./hooks/useGetDataByPaging\";\nimport useDeleteData from \"./hooks/useDeleteData\";\nimport useCreateData from \"./hooks/useCreateData\";\nimport useUpdateData from \"./hooks/useUpdateData\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst allowedPageSizes = [5, 10, \"all\"]; /////////\n\ntoast.configure();\n\nconst BatchStudent = () => {\n  _s();\n\n  const {\n    refetchStudent,\n    dataStudent,\n    isErrorStudent,\n    isLoadingStudent\n  } = useGetData();\n  const studentDataSource = new DataSource({\n    store: new ArrayStore({\n      key: \"id\",\n      data: dataStudent // Other ArrayStore properties go here\n\n    }),\n    // Other DataSource properties go here\n    reshapeOnPush: true\n  }); //State\n\n  const [changes, setChanges] = useState([]); // const [date, setDate] = React.useState(new Date());\n  // Save params\n\n  const gridRef = useRef(null);\n\n  const renderButton = cell => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"flex\",\n        justifyContent: \"space-between\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        onClick: () => {\n          var _gridRef$current, _gridRef$current$inst;\n\n          (_gridRef$current = gridRef.current) === null || _gridRef$current === void 0 ? void 0 : (_gridRef$current$inst = _gridRef$current.instance) === null || _gridRef$current$inst === void 0 ? void 0 : _gridRef$current$inst.deleteRow(cell.rowIndex);\n        },\n        children: \"remove\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\" // disabled={isAddButtonVisible}\n        ,\n        onClick: () => {\n          var _gridRef$current2, _gridRef$current2$ins;\n\n          (_gridRef$current2 = gridRef.current) === null || _gridRef$current2 === void 0 ? void 0 : (_gridRef$current2$ins = _gridRef$current2.instance) === null || _gridRef$current2$ins === void 0 ? void 0 : _gridRef$current2$ins.undeleteRow(cell.rowIndex);\n        },\n        children: \"unremove\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this);\n  };\n\n  const onChangesChange = React.useCallback(changes => {\n    console.log(\"changes: \" + changes);\n    setChanges(changes);\n  }, []);\n\n  const onCellClick = e => {\n    var _gridRef$current3, _gridRef$current3$ins;\n\n    (_gridRef$current3 = gridRef.current) === null || _gridRef$current3 === void 0 ? void 0 : (_gridRef$current3$ins = _gridRef$current3.instance) === null || _gridRef$current3$ins === void 0 ? void 0 : _gridRef$current3$ins.editCell(e.rowIndex, e.columnIndex);\n  }; // Note usually that Create Field default when add row\n\n\n  const onInitRow = e => {\n    e.data.createDate = new Date();\n  };\n\n  return isLoadingStudent ? /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 5\n  }, this) : isErrorStudent ? /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"An error while fetching posts\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 5\n  }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main__title\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Manage Data Student\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main__Add\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main__body\",\n      children: /*#__PURE__*/_jsxDEV(DataGrid, {\n        dataSource: studentDataSource,\n        remoteOperations: true,\n        ref: gridRef,\n        repaintChangesOnly: true,\n        newRowPosition: true,\n        onCellClick: onCellClick,\n        onInitNewRow: onInitRow,\n        children: [/*#__PURE__*/_jsxDEV(Paging, {\n          defaultPageSize: 5\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Pager, {\n          visible: true,\n          allowedPageSizes: allowedPageSizes,\n          displayMode: \"compact\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Editing, {\n          mode: \"batch\",\n          useIcons: true,\n          changes: changes,\n          onChangesChange: onChangesChange // editRowKey={editRowKey}\n          // onEditRowKeyChange={onEditRowKeyChange}\n          ,\n          startEditAction: true,\n          selectTextOnEditStart: true,\n          children: /*#__PURE__*/_jsxDEV(TextField, {\n            label: \"Student\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Column, {\n          dataField: \"nameStudent\",\n          dataType: \"string\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Column, {\n          dataField: \"phoneStudent\",\n          dataType: \"string\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Column, {\n          dataField: \"dateOfBirth\",\n          dataType: \"date\",\n          format: \"dd/MM/yyyy\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Column, {\n          dataField: \"createDate\",\n          dataType: \"date\",\n          visible: false,\n          defaultSortOrder: \"asc\" // value={date}\n\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Column, {\n          dataField: \"scoreStudent\",\n          dataType: \"number\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Column, {\n          dataField: \"\",\n          cellRender: renderButton\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Toolbar, {\n          children: [/*#__PURE__*/_jsxDEV(Item, {\n            location: \"after\",\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"contained\",\n              icon: \"refresh\",\n              onClick: () => refetchStudent(),\n              children: \"Refetch\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 160,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Item, {\n            location: \"after\",\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"contained\",\n              icon: \"refresh\",\n              onClick: () => {\n                var _gridRef$current4, _gridRef$current4$ins;\n\n                return (_gridRef$current4 = gridRef.current) === null || _gridRef$current4 === void 0 ? void 0 : (_gridRef$current4$ins = _gridRef$current4.instance) === null || _gridRef$current4$ins === void 0 ? void 0 : _gridRef$current4$ins.cancelEditData();\n              },\n              children: \"Discard\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 169,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Item, {\n            location: \"after\",\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"contained\",\n              icon: \"refresh\",\n              onClick: () => {\n                var _gridRef$current5, _gridRef$current5$ins;\n\n                return (_gridRef$current5 = gridRef.current) === null || _gridRef$current5 === void 0 ? void 0 : (_gridRef$current5$ins = _gridRef$current5.instance) === null || _gridRef$current5$ins === void 0 ? void 0 : _gridRef$current5$ins.saveEditData();\n              },\n              viable: false,\n              children: \"Save\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 178,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Item, {\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"contained\",\n              onClick: () => {\n                var _gridRef$current6, _gridRef$current6$ins;\n\n                return (_gridRef$current6 = gridRef.current) === null || _gridRef$current6 === void 0 ? void 0 : (_gridRef$current6$ins = _gridRef$current6.instance) === null || _gridRef$current6$ins === void 0 ? void 0 : _gridRef$current6$ins.addRow();\n              },\n              children: \"add\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 188,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 5\n  }, this);\n}; //Create content customize Form\n\n\n_s(BatchStudent, \"Tz2v0Q9nNxxbfxCS3NYW39Aem40=\", false, function () {\n  return [useGetData];\n});\n\n_c = BatchStudent;\nexport default BatchStudent;\n\nvar _c;\n\n$RefreshReg$(_c, \"BatchStudent\");","map":{"version":3,"sources":["/Users/nguyenthanhhuy/Documents/GitHub/ThucTapReactJS/my-app/src/components/BatchStudent/index.js"],"names":["React","useEffect","useState","useRef","useCallback","ArrayStore","DataSource","DataGrid","Column","Paging","Pager","Editing","Popup","Toolbar","Item","ToolbarItem","TextField","Button","useForm","Controller","toast","useGetData","useGetDataByPaing","useDeleteData","useCreateData","useUpdateData","allowedPageSizes","configure","BatchStudent","refetchStudent","dataStudent","isErrorStudent","isLoadingStudent","studentDataSource","store","key","data","reshapeOnPush","changes","setChanges","gridRef","renderButton","cell","display","justifyContent","current","instance","deleteRow","rowIndex","undeleteRow","onChangesChange","console","log","onCellClick","e","editCell","columnIndex","onInitRow","createDate","Date","cancelEditData","saveEditData","addRow"],"mappings":"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","sourcesContent":["import \"devextreme/dist/css/dx.common.css\";\nimport \"devextreme/dist/css/dx.light.css\";\nimport React, { useEffect, useState, useRef, useCallback } from \"react\";\nimport ArrayStore from \"devextreme/data/array_store\";\nimport DataSource from \"devextreme/data/data_source\";\nimport \"./BatchStudent.css\";\nimport DataGrid, {\n  Column,\n  Paging,\n  Pager,\n  Editing,\n  Popup,\n  Toolbar,\n  Item,\n  ToolbarItem,\n} from \"devextreme-react/data-grid\";\nimport { TextField, Button } from \"@material-ui/core\";\n\nimport { useForm, Controller } from \"react-hook-form\";\n\n// Toast\nimport { toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport useGetData from \"./hooks/useGetData\";\nimport useGetDataByPaing from \"./hooks/useGetDataByPaging\";\nimport useDeleteData from \"./hooks/useDeleteData\";\nimport useCreateData from \"./hooks/useCreateData\";\nimport useUpdateData from \"./hooks/useUpdateData\";\nconst allowedPageSizes = [5, 10, \"all\"];\n\n/////////\ntoast.configure();\nconst BatchStudent = () => {\n  const {\n    refetchStudent,\n\n    dataStudent,\n    isErrorStudent,\n    isLoadingStudent,\n  } = useGetData();\n  const studentDataSource = new DataSource({\n    store: new ArrayStore({\n      key: \"id\",\n      data: dataStudent,\n\n      // Other ArrayStore properties go here\n    }),\n    // Other DataSource properties go here\n\n    reshapeOnPush: true,\n  });\n  //State\n  const [changes, setChanges] = useState([]);\n\n  // const [date, setDate] = React.useState(new Date());\n  // Save params\n  const gridRef = useRef(null);\n\n  const renderButton = (cell) => {\n    return (\n      <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\n        {/* <Button\n          variant=\"contained\"\n          onClick={() => {\n            gridRef.current?.instance?.editCell(cell.rowIndex,cell.columnIndex);\n          }}\n        >\n          edit\n        </Button> */}\n        <Button\n          variant=\"contained\"\n          onClick={() => {\n            gridRef.current?.instance?.deleteRow(cell.rowIndex);\n          }}\n        >\n          remove\n        </Button>\n        <Button\n          variant=\"contained\"\n          // disabled={isAddButtonVisible}\n          onClick={() => {\n            gridRef.current?.instance?.undeleteRow(cell.rowIndex);\n          }}\n        >\n          unremove\n        </Button>\n      </div>\n    );\n  };\n\n  const onChangesChange = React.useCallback((changes) => {\n    console.log(\"changes: \"+changes);\n    setChanges(changes);\n  }, []);\n  const onCellClick = (e) => {\n    gridRef.current?.instance?.editCell(e.rowIndex, e.columnIndex);\n  };\n\n  // Note usually that Create Field default when add row\n  const onInitRow = (e) => {\n    e.data.createDate = new Date();\n  };\n\n  return isLoadingStudent ? (\n    <div>Loading...</div>\n  ) : isErrorStudent ? (\n    <div>An error while fetching posts</div>\n  ) : (\n    <div>\n      <div className=\"main__title\">\n        <h1>Manage Data Student</h1>\n      </div>\n\n      <div className=\"main__Add\"></div>\n      <div className=\"main__body\">\n        <DataGrid\n          dataSource={studentDataSource}\n          remoteOperations={true}\n          ref={gridRef}\n          repaintChangesOnly={true}\n          newRowPosition\n          onCellClick={onCellClick}\n          onInitNewRow={onInitRow}\n        >\n          <Paging defaultPageSize={5} />\n          <Pager\n            visible={true}\n            allowedPageSizes={allowedPageSizes}\n            displayMode=\"compact\"\n          />\n          <Editing\n            mode=\"batch\"\n            useIcons={true}\n            changes={changes}\n            onChangesChange={onChangesChange}\n            // editRowKey={editRowKey}\n            // onEditRowKeyChange={onEditRowKeyChange}\n            startEditAction\n            selectTextOnEditStart={true}\n          >\n            <TextField label=\"Student\"></TextField>\n          </Editing>\n\n          <Column dataField=\"nameStudent\" dataType=\"string\" />\n          <Column dataField=\"phoneStudent\" dataType=\"string\" />\n          <Column dataField=\"dateOfBirth\" dataType=\"date\" format=\"dd/MM/yyyy\" />\n          <Column\n            dataField=\"createDate\"\n            dataType=\"date\"\n            visible={false}\n            defaultSortOrder=\"asc\"\n            // value={date}\n          />\n\n          <Column dataField=\"scoreStudent\" dataType=\"number\" />\n          <Column dataField=\"\" cellRender={renderButton}></Column>\n\n          <Toolbar>\n          <Item location=\"after\">\n              <Button\n                variant=\"contained\"\n                icon=\"refresh\"\n                onClick={() => refetchStudent()}\n              >\n               Refetch\n              </Button>\n            </Item>\n            <Item location=\"after\">\n              <Button\n                variant=\"contained\"\n                icon=\"refresh\"\n                onClick={() => gridRef.current?.instance?.cancelEditData()}\n              >\n                Discard\n              </Button>\n            </Item>\n            <Item location=\"after\">\n              <Button\n                variant=\"contained\"\n                icon=\"refresh\"\n                onClick={() => gridRef.current?.instance?.saveEditData()}\n                viable={false}\n              >\n                Save\n              </Button>\n            </Item>\n            <Item>\n              <Button\n                variant=\"contained\"\n                onClick={() => gridRef.current?.instance?.addRow()}\n              >\n                add\n              </Button>\n            </Item>\n          </Toolbar>\n        </DataGrid>\n      </div>\n\n      {/* ///React Hook Form + Material Setup */}\n    </div>\n  );\n};\n//Create content customize Form\n\nexport default BatchStudent;\n"]},"metadata":{},"sourceType":"module"}